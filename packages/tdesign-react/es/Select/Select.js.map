{"version":3,"file":"Select.js","sources":["../../../components/Select/hooks/useOptions.ts","../../../components/Select/Select.tsx"],"sourcesContent":["import React, { useState, useEffect, ReactNode, ReactElement } from 'react';\nimport { get } from 'lodash-es';\nimport type {\n  SelectKeysType,\n  SelectOption,\n  SelectOptionGroup,\n  SelectValue,\n  TdOptionProps,\n} from '../type';\nimport { getValueToOption, type ValueToOption } from '../utils/helper';\nimport Option from '../Option';\nimport OptionGroup from '../OptionGroup';\n\nexport function isSelectOptionGroup(\n  option: SelectOption,\n): option is SelectOptionGroup {\n  return !!option && 'group' in option && 'children' in option;\n}\n\ntype OptionValueType = SelectValue<SelectOption>;\n\n// 处理 options 的逻辑\nfunction UseOptions(\n  keys: SelectKeysType,\n  options: SelectOption[],\n  children: ReactNode,\n  valueType: 'object' | 'value',\n  value: OptionValueType,\n  reserveKeyword: boolean,\n) {\n  const [valueToOption, setValueToOption] = useState<ValueToOption>({});\n  const [currentOptions, setCurrentOptions] = useState<SelectOption[]>([]);\n  const [tmpPropOptions, setTmpPropOptions] = useState<SelectOption[]>([]);\n  const [selectedOptions, setSelectedOptions] = useState<SelectOption[]>([]);\n\n  // 处理设置 option 的逻辑\n  useEffect(() => {\n    let transformedOptions = options;\n\n    const arrayChildren = React.Children.toArray(children);\n    const optionChildren = arrayChildren.filter(\n      (v: ReactElement) => v.type === Option || v.type === OptionGroup,\n    );\n    const isChildrenFilterable =\n      arrayChildren.length > 0 &&\n      optionChildren.length === arrayChildren.length;\n    if (reserveKeyword && currentOptions.length && isChildrenFilterable) return;\n\n    if (isChildrenFilterable) {\n      const handlerOptionElement = (v) => {\n        if (React.isValidElement<SelectOption>(v)) {\n          if (v.type === OptionGroup) {\n            return {\n              ...v.props,\n              group: v.props.label,\n              children: v.props.children?.map((v) => handlerOptionElement(v)),\n            };\n          }\n          return {\n            ...v.props,\n            label: v.props.label || v.props.children,\n          };\n        }\n        return { label: v };\n      };\n      transformedOptions = arrayChildren?.map<SelectOption>((v) =>\n        handlerOptionElement(v),\n      );\n    }\n    if (keys) {\n      // 如果有定制 keys 先做转换\n      transformedOptions = transformedOptions?.map<SelectOption>((option) => ({\n        ...option,\n        value: get(option, keys?.value || 'value'),\n        label: get(option, keys?.label || 'label'),\n      }));\n    }\n    setCurrentOptions(transformedOptions);\n    setTmpPropOptions(transformedOptions);\n\n    setValueToOption(\n      getValueToOption(\n        children as ReactElement,\n        options as TdOptionProps[],\n        keys,\n      ) || {},\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [options, keys, children, reserveKeyword]);\n\n  // 同步 value 对应的 options\n  useEffect(() => {\n    const valueKey = keys?.value || 'value';\n    const labelKey = keys?.label || 'label';\n\n    setSelectedOptions((oldSelectedOptions: SelectOption[]) => {\n      const createOptionFromValue = (item: OptionValueType) => {\n        if (valueType === 'value') {\n          return (\n            valueToOption[item as string | number] ||\n            oldSelectedOptions.find(\n              (option) => get(option, valueKey) === item,\n            ) || {\n              [valueKey]: item,\n              [labelKey]: item,\n            }\n          );\n        }\n        if (typeof item === 'object' && item !== null) {\n          return item;\n        }\n        return [];\n      };\n\n      // 多选\n      if (Array.isArray(value)) {\n        return value.map(createOptionFromValue);\n      }\n\n      // 单选\n      if (value !== undefined && value !== null) {\n        const option = createOptionFromValue(value);\n        return option ? [option] : [];\n      }\n\n      return [];\n    });\n  }, [value, keys, valueType, valueToOption, setSelectedOptions]);\n\n  return {\n    currentOptions,\n    setCurrentOptions,\n    tmpPropOptions,\n    setTmpPropOptions,\n    valueToOption,\n    setValueToOption,\n    selectedOptions,\n    setSelectedOptions,\n  };\n}\n\nexport default UseOptions;\n","import React, {\n  useEffect,\n  useMemo,\n  KeyboardEvent,\n  WheelEvent,\n  useRef,\n  useCallback,\n  Children,\n  cloneElement,\n  isValidElement,\n  useState,\n} from 'react';\n\nimport classNames from 'classnames';\nimport { isFunction, get, debounce } from 'lodash-es';\nimport { getOffsetTopToContainer } from '../utils/helper';\nimport useControlled from '../hooks/useControlled';\nimport useConfig from '../hooks/useConfig';\nimport forwardRefWithStatics from '../utils/forwardRefWithStatics';\nimport { getSelectValueArr, getSelectedOptions } from './utils/helper';\n\nimport noop from '../utils/noop';\nimport FakeArrow from '../common/FakeArrow';\nimport Loading from '../loading';\nimport SelectInput, {\n  SelectInputValue,\n  SelectInputValueChangeContext,\n} from '../select-input';\nimport Option from './Option';\nimport OptionGroup from './OptionGroup';\nimport PopupContent from './PopupContent';\nimport { Tag } from '../tag';\nimport {\n  TdSelectProps,\n  TdOptionProps,\n  SelectOption,\n  SelectValueChangeTrigger,\n  SelectValue,\n} from './type';\n\nimport { StyledProps } from '../common';\nimport { selectDefaultProps } from './defaultProps';\nimport { PopupVisibleChangeContext } from '../popup';\n\nimport useOptions, { isSelectOptionGroup } from './hooks/useOptions';\nimport composeRefs from '../utils/composeRefs';\nimport { parseContentTNode } from '../utils/parentTNode';\nimport useDefaultProps from '../hooks/useDefaultProps';\n\nexport interface SelectProps<T = SelectOption>\n  extends TdSelectProps<T>,\n  StyledProps {\n  // 子节点\n  children?: React.ReactNode;\n  onMouseEnter?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  onMouseLeave?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n}\n\ntype OptionsType = TdOptionProps[];\n\nconst Select = forwardRefWithStatics(\n  (originalProps: SelectProps, ref: React.Ref<HTMLDivElement>) => {\n    const props = useDefaultProps<SelectProps>(\n      originalProps,\n      selectDefaultProps,\n    );\n    const {\n      readonly,\n      borderless,\n      autoWidth,\n      creatable,\n      loadingText = '加载中...',\n      max,\n      popupProps,\n      reserveKeyword,\n      className,\n      style,\n      disabled,\n      size,\n      multiple,\n      placeholder,\n      clearable,\n      prefixIcon,\n      options,\n      filterable,\n      loading,\n      empty,\n      valueType,\n      keys,\n      children,\n      collapsedItems,\n      minCollapsedNum,\n      valueDisplay,\n      showArrow,\n      inputProps,\n      panelBottomContent,\n      panelTopContent,\n      selectInputProps,\n      tagInputProps,\n      tagProps,\n      scroll,\n      suffixIcon,\n      label,\n      filter,\n      onFocus,\n      onBlur,\n      onClear = noop,\n      onCreate,\n      onRemove,\n      onSearch,\n      onEnter,\n      onPopupVisibleChange,\n    } = props;\n\n    const [value, onChange] = useControlled(props, 'value', props.onChange);\n    const selectInputRef = useRef(null);\n    const { classPrefix } = useConfig();\n    const { overlayClassName, onScroll, onScrollToBottom, ...restPopupProps } =\n      popupProps || {};\n    const [isScrolling, toggleIsScrolling] = useState(false);\n\n    const name = `${classPrefix}-select`; // t-select\n\n    const [showPopup, setShowPopup] = useControlled(\n      props,\n      'popupVisible',\n      onPopupVisibleChange,\n    );\n    const [inputValue, onInputChange] = useControlled(\n      props,\n      'inputValue',\n      props.onInputChange,\n    );\n\n    const {\n      currentOptions,\n      setCurrentOptions,\n      tmpPropOptions,\n      valueToOption,\n      selectedOptions,\n    } = useOptions(keys, options, children, valueType, value, reserveKeyword);\n\n    const selectedLabel = useMemo(() => {\n      if (multiple) {\n        return selectedOptions.map(\n          (selectedOption) =>\n            get(selectedOption || {}, keys?.label || 'label') || '',\n        );\n      }\n      return get(selectedOptions[0] || {}, keys?.label || 'label') || undefined;\n    }, [selectedOptions, keys, multiple]);\n\n    const handleShowPopup = (\n      visible: boolean,\n      ctx: PopupVisibleChangeContext,\n    ) => {\n      if (disabled) return;\n      visible && toggleIsScrolling(false);\n      !visible && onInputChange('', { trigger: 'blur' });\n      setShowPopup(visible, ctx);\n    };\n\n    // 可以根据触发来源，自由定制标签变化时的筛选器行为\n    const onTagChange = (_currentTags: SelectInputValue, context) => {\n      const { trigger, index, item, e } = context;\n      // backspace\n      if (trigger === 'backspace') {\n        e.stopPropagation();\n\n        let closest = -1;\n        let len = index;\n        while (len >= 0) {\n          const option = selectedOptions[len];\n          if (!isSelectOptionGroup(option) && !option.disabled) {\n            closest = len;\n            break;\n          }\n          len -= 1;\n        }\n        if (closest < 0) {\n          return;\n        }\n        const values = getSelectValueArr(\n          value,\n          value[closest],\n          true,\n          valueType,\n          keys,\n        );\n\n        // 处理onChange回调中的selectedOptions参数\n        const { currentSelectedOptions } = getSelectedOptions(\n          values,\n          multiple,\n          valueType,\n          keys,\n          valueToOption,\n        );\n        onChange(values, {\n          e,\n          trigger,\n          selectedOptions: currentSelectedOptions,\n        });\n        return;\n      }\n\n      if (trigger === 'tag-remove') {\n        e?.stopPropagation?.();\n        const values = getSelectValueArr(\n          value,\n          value[index],\n          true,\n          valueType,\n          keys,\n        );\n        // 处理onChange回调中的selectedOptions参数\n        const { currentSelectedOptions } = getSelectedOptions(\n          values,\n          multiple,\n          valueType,\n          keys,\n          valueToOption,\n        );\n\n        onChange(values, {\n          e,\n          trigger,\n          selectedOptions: currentSelectedOptions,\n        });\n        if (isFunction(onRemove)) {\n          onRemove({\n            value: value[index],\n            data: {\n              label: item,\n              value: value[index],\n            },\n            e,\n          });\n        }\n      }\n    };\n\n    const onCheckAllChange = (\n      checkAll: boolean,\n      e: React.MouseEvent<HTMLLIElement>,\n    ) => {\n      const isDisabledCheckAll = (opt: TdOptionProps) =>\n        opt.checkAll && opt.disabled;\n      if (\n        !multiple ||\n        currentOptions.some(\n          (opt) => !isSelectOptionGroup(opt) && isDisabledCheckAll(opt),\n        )\n      ) {\n        return;\n      }\n\n      const isSelectableOption = (opt: TdOptionProps) =>\n        !opt.checkAll && !opt.disabled;\n      const getOptionValue = (option: SelectOption) =>\n        valueType === 'object' ? option : option[keys?.value || 'value'];\n\n      const values = [];\n      currentOptions.forEach((option) => {\n        if (isSelectOptionGroup(option)) {\n          option.children.forEach((item) => {\n            if (isSelectableOption(item)) {\n              values.push(getOptionValue(item));\n            }\n          });\n        } else if (isSelectableOption(option)) {\n          values.push(getOptionValue(option));\n        }\n      });\n\n      const { currentSelectedOptions, allSelectedValue } = getSelectedOptions(\n        values,\n        multiple,\n        valueType,\n        keys,\n        valueToOption,\n      );\n\n      const checkAllValue =\n        !checkAll &&\n          allSelectedValue.length !== (props.value as Array<SelectOption>)?.length\n          ? allSelectedValue\n          : [];\n\n      onChange?.(checkAllValue, {\n        e,\n        trigger: !checkAll ? 'check' : 'uncheck',\n        selectedOptions: currentSelectedOptions,\n      });\n    };\n\n    // 选中 Popup 某项\n    const handleChange = (\n      value:\n        | string\n        | number\n        | Array<string | number | Record<string, string | number>>,\n      context: {\n        e: React.MouseEvent<HTMLLIElement>;\n        trigger: SelectValueChangeTrigger;\n        value?: SelectValue;\n        label?: string;\n      },\n    ) => {\n      const selectedValue = multiple ? context.value : value;\n\n      if (multiple) {\n        !reserveKeyword &&\n          inputValue &&\n          onInputChange('', { e: context.e, trigger: 'change' });\n      }\n      if (creatable && isFunction(onCreate)) {\n        if (\n          (options as OptionsType).filter(\n            (option) => option.value === selectedValue,\n          ).length === 0\n        ) {\n          onCreate(selectedValue as string); // 手动输入 此时为string\n        }\n      }\n      // 处理onChange回调中的selectedOptions参数\n      const { currentSelectedOptions, currentOption } = getSelectedOptions(\n        value,\n        multiple,\n        valueType,\n        keys,\n        valueToOption,\n        selectedValue,\n      );\n      onChange?.(value, {\n        e: context.e,\n        trigger: context.trigger,\n        selectedOptions: currentSelectedOptions,\n        option: currentOption,\n      });\n\n      if (multiple && context?.trigger === 'uncheck' && isFunction(onRemove)) {\n        const value = context?.value;\n        const option = (options as OptionsType).find(\n          (option) => option.value === value,\n        );\n        onRemove({\n          value,\n          data: option,\n          e: context.e,\n        });\n      }\n    };\n\n    // 处理filter逻辑\n    const handleFilter = (value: string) => {\n      let filteredOptions: SelectOption[] = [];\n      if (filterable && isFunction(onSearch)) {\n        return;\n      }\n      if (!value) {\n        setCurrentOptions(tmpPropOptions);\n        return;\n      }\n\n      const filterLabels = [];\n      const filterMethods = (option: SelectOption) => {\n        if (filter && isFunction(filter)) {\n          return filter(value, option);\n        }\n        const upperValue = value.toUpperCase();\n        return (option?.label || '').toUpperCase().includes(upperValue);\n      };\n\n      tmpPropOptions?.forEach((option) => {\n        if (isSelectOptionGroup(option)) {\n          filteredOptions.push({\n            ...option,\n            children: option.children?.filter((child) => {\n              if (filterMethods(child)) {\n                filterLabels.push(child.label);\n                return true;\n              }\n              return false;\n            }),\n          });\n        } else if (filterMethods(option)) {\n          filterLabels.push(option.label);\n          filteredOptions.push(option);\n        }\n      });\n      const isSameLabelOptionExist = filterLabels.includes(value);\n      if (creatable && !isSameLabelOptionExist) {\n        filteredOptions = filteredOptions.concat([{ label: value, value }]);\n      }\n      setCurrentOptions(filteredOptions);\n    };\n\n    // 处理输入框逻辑\n    const handleInputChange = (\n      value: string,\n      context: SelectInputValueChangeContext,\n    ) => {\n      if (context.trigger !== 'clear') {\n        onInputChange(value, { e: context.e, trigger: 'input' });\n      }\n      if (value === undefined) {\n        return;\n      }\n      if (isFunction(onSearch)) {\n        onSearch(value, { e: context.e as KeyboardEvent<HTMLDivElement> });\n        return;\n      }\n    };\n\n    const handleClear = (context) => {\n      context.e.stopPropagation();\n      if (Array.isArray(value)) {\n        onChange([], { ...context, trigger: 'clear', selectedOptions: [] });\n      } else {\n        onChange(null, { ...context, trigger: 'clear', selectedOptions: [] });\n      }\n      onClear(context);\n    };\n\n    useEffect(() => {\n      if (typeof inputValue !== 'undefined') {\n        handleFilter(String(inputValue));\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [inputValue, tmpPropOptions]);\n\n    // 渲染后置图标\n    const renderSuffixIcon = () => {\n      if (suffixIcon) {\n        return suffixIcon;\n      }\n      if (loading) {\n        return (\n          <Loading\n            className={classNames(\n              `${name}__right-icon`,\n              `${name}__active-icon`,\n            )}\n            loading={true}\n            size=\"small\"\n          />\n        );\n      }\n\n      return (\n        showArrow && (\n          <FakeArrow\n            className={`${name}__right-icon`}\n            isActive={showPopup}\n            disabled={disabled}\n          />\n        )\n      );\n    };\n\n    const getPopupInstance = useCallback(\n      () => (selectInputRef as any).current?.getPopupContentElement(),\n      [],\n    );\n\n    const childrenWithProps = Children.map(children, (child) => {\n      if (isValidElement(child)) {\n        const addedProps = { multiple };\n        return cloneElement(child, { ...addedProps });\n      }\n      return child;\n    });\n\n    // 渲染主体内容\n    const renderContent = () => {\n      const popupContentProps = {\n        onChange: handleChange,\n        value,\n        className,\n        size,\n        multiple,\n        showPopup,\n        // popup弹出层内容只会在点击事件之后触发 并且无任何透传参数\n        setShowPopup: (show: boolean) => handleShowPopup(show, {}),\n        options: currentOptions,\n        empty,\n        max,\n        loadingText,\n        loading,\n        valueType,\n        keys,\n        panelBottomContent,\n        panelTopContent,\n        onCheckAllChange,\n        getPopupInstance,\n        scroll,\n      };\n      return (\n        <PopupContent {...popupContentProps}>{childrenWithProps}</PopupContent>\n      );\n    };\n\n    const renderValueDisplay = () => {\n      if (!valueDisplay) {\n        if (!multiple) {\n          if (typeof selectedLabel !== 'string') {\n            return selectedLabel;\n          }\n          return '';\n        }\n        return ({ value: val }) =>\n          val\n            .slice(0, minCollapsedNum ? minCollapsedNum : val.length)\n            .map((v: string, key: number) => {\n              const filterOption: SelectOption & { disabled?: boolean } =\n                options?.find((option) => option.label === v);\n              return (\n                <Tag\n                  key={key}\n                  closable={!filterOption?.disabled && !disabled && !readonly}\n                  size={size}\n                  {...tagProps}\n                  onClose={({ e }) => {\n                    e.stopPropagation();\n                    e?.nativeEvent?.stopImmediatePropagation?.();\n                    const values = getSelectValueArr(\n                      value,\n                      value[key],\n                      true,\n                      valueType,\n                      keys,\n                    );\n\n                    const { currentSelectedOptions } = getSelectedOptions(\n                      values,\n                      multiple,\n                      valueType,\n                      keys,\n                      valueToOption,\n                      value,\n                    );\n                    onChange(values, {\n                      e,\n                      selectedOptions: currentSelectedOptions,\n                      trigger: 'tag-remove',\n                    });\n                    tagProps?.onClose?.({ e });\n\n                    onRemove?.({\n                      value: value[key],\n                      data: { label: v, value: value[key] },\n                      e: e as unknown as React.MouseEvent<\n                        HTMLDivElement,\n                        MouseEvent\n                      >,\n                    });\n                  }}\n                >\n                  {v}\n                </Tag>\n              );\n            });\n      }\n      if (typeof valueDisplay === 'string') {\n        return valueDisplay;\n      }\n      if (multiple) {\n        return ({ onClose }) =>\n          parseContentTNode(valueDisplay, { value: selectedOptions, onClose });\n      }\n      return parseContentTNode(valueDisplay, {\n        value: selectedLabel,\n        onClose: noop,\n      });\n    };\n\n    // 将第一个选中的 option 置于列表可见范围的最后一位\n    const updateScrollTop = (content: HTMLDivElement) => {\n      if (!content || isScrolling) {\n        return;\n      }\n      const firstSelectedNode: HTMLDivElement = content.querySelector(\n        `.${classPrefix}-is-selected`,\n      );\n      if (!multiple && firstSelectedNode) {\n        const { paddingBottom } = getComputedStyle(firstSelectedNode);\n        const { marginBottom } = getComputedStyle(content);\n        const elementBottomHeight =\n          parseInt(paddingBottom, 10) + parseInt(marginBottom, 10);\n        // 小于0时不需要特殊处理，会被设为0\n        const updateValue =\n          getOffsetTopToContainer(firstSelectedNode, content) -\n          content.offsetTop -\n          (content.clientHeight - firstSelectedNode.clientHeight) +\n          elementBottomHeight;\n\n        // 通过 setTimeout 确保组件渲染完成后再设置 scrollTop\n        setTimeout(() => {\n          // eslint-disable-next-line no-param-reassign\n          content.scrollTop = updateValue;\n        });\n      }\n    };\n\n    const { onMouseEnter, onMouseLeave } = props;\n\n    const handleEnter = (\n      _,\n      context: { inputValue: string; e: KeyboardEvent<HTMLDivElement> },\n    ) => {\n      onEnter?.({ ...context, value });\n    };\n\n    const handleScroll = ({ e }: { e: WheelEvent<HTMLDivElement> }) => {\n      toggleIsScrolling(true);\n\n      onScroll?.({ e });\n      if (onScrollToBottom) {\n        const debounceOnScrollBottom = debounce(\n          (e) => onScrollToBottom({ e }),\n          100,\n        );\n\n        const { scrollTop, clientHeight, scrollHeight } =\n          e.target as HTMLDivElement;\n        if (clientHeight + Math.floor(scrollTop) === scrollHeight) {\n          debounceOnScrollBottom(e);\n        }\n      }\n    };\n\n    return (\n      <div\n        className={classNames(`${name}__wrap`, className)}\n        style={style}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n      >\n        <SelectInput\n          autoWidth={!style?.width && autoWidth}\n          ref={composeRefs(ref, selectInputRef)}\n          className={name}\n          readonly={readonly}\n          autofocus={props.autofocus}\n          allowInput={filterable || isFunction(filter)}\n          multiple={multiple}\n          value={selectedLabel}\n          options={selectedOptions}\n          valueDisplay={renderValueDisplay()}\n          clearable={clearable}\n          disabled={disabled}\n          status={props.status}\n          tips={props.tips}\n          borderless={borderless}\n          label={label}\n          suffix={props.suffix}\n          prefixIcon={prefixIcon}\n          suffixIcon={renderSuffixIcon()}\n          panel={renderContent()}\n          placeholder={\n            !multiple && showPopup && selectedLabel\n              ? selectedLabel\n              : placeholder || '请选择'\n          }\n          inputValue={inputValue}\n          tagInputProps={{\n            size,\n            ...tagInputProps,\n          }}\n          tagProps={{ size, ...tagProps }}\n          inputProps={{\n            size,\n            ...inputProps,\n          }}\n          minCollapsedNum={minCollapsedNum}\n          collapsedItems={collapsedItems}\n          updateScrollTop={updateScrollTop}\n          popupProps={{\n            overlayClassName: [`${name}__dropdown`, overlayClassName],\n            onScroll: handleScroll,\n            ...restPopupProps,\n          }}\n          popupVisible={showPopup}\n          onPopupVisibleChange={handleShowPopup}\n          onTagChange={onTagChange}\n          onInputChange={handleInputChange}\n          onFocus={onFocus}\n          onEnter={handleEnter}\n          onBlur={(_, context) => {\n            onBlur?.({\n              value,\n              e: context.e as React.FocusEvent<HTMLDivElement>,\n            });\n          }}\n          onClear={handleClear}\n          {...selectInputProps}\n        />\n      </div>\n    );\n  },\n  { Option, OptionGroup },\n);\n\nSelect.displayName = 'Select';\n\nexport default Select;\n"],"names":["isSelectOptionGroup","option","UseOptions","keys","options","children","valueType","value","reserveKeyword","_useState","useState","_useState2","_slicedToArray","valueToOption","setValueToOption","_useState3","_useState4","currentOptions","setCurrentOptions","_useState5","_useState6","tmpPropOptions","setTmpPropOptions","_useState7","_useState8","selectedOptions","setSelectedOptions","useEffect","transformedOptions","arrayChildren","React","Children","toArray","optionChildren","filter","v","type","Option","OptionGroup","isChildrenFilterable","length","handlerOptionElement","isValidElement","_v$props$children","_objectSpread","props","group","label","map","_transformedOptions","get","getValueToOption","valueKey","labelKey","oldSelectedOptions","createOptionFromValue","item","find","_defineProperty","_typeof","Array","isArray","Select","forwardRefWithStatics","originalProps","ref","useDefaultProps","selectDefaultProps","readonly","borderless","autoWidth","creatable","_props$loadingText","loadingText","max","popupProps","className","style","disabled","size","multiple","placeholder","clearable","prefixIcon","filterable","loading","empty","collapsedItems","minCollapsedNum","valueDisplay","showArrow","inputProps","panelBottomContent","panelTopContent","selectInputProps","tagInputProps","tagProps","scroll","suffixIcon","onFocus","onBlur","_props$onClear","onClear","noop","onCreate","onRemove","onSearch","onEnter","onPopupVisibleChange","_useControlled","useControlled","onChange","_useControlled2","selectInputRef","useRef","_useConfig","useConfig","classPrefix","_ref","overlayClassName","onScroll","onScrollToBottom","restPopupProps","_objectWithoutProperties","_excluded","isScrolling","toggleIsScrolling","name","concat","_useControlled3","_useControlled4","showPopup","setShowPopup","_useControlled5","onInputChange","_useControlled6","inputValue","_useOptions","useOptions","selectedLabel","useMemo","selectedOption","handleShowPopup","visible","ctx","trigger","onTagChange","_currentTags","context","index","e","stopPropagation","closest","len","values","getSelectValueArr","_getSelectedOptions","getSelectedOptions","currentSelectedOptions","_e$stopPropagation","call","_getSelectedOptions2","isFunction","data","onCheckAllChange","checkAll","_props$value","isDisabledCheckAll","opt","some","isSelectableOption","getOptionValue","forEach","push","_getSelectedOptions3","allSelectedValue","checkAllValue","handleChange","selectedValue","_getSelectedOptions4","currentOption","handleFilter","filteredOptions","filterLabels","filterMethods","upperValue","toUpperCase","includes","_option$children","child","isSameLabelOptionExist","handleInputChange","handleClear","String","renderSuffixIcon","createElement","Loading","classNames","FakeArrow","isActive","getPopupInstance","useCallback","_selectInputRef$curre","current","getPopupContentElement","childrenWithProps","addedProps","cloneElement","renderContent","popupContentProps","show","PopupContent","renderValueDisplay","_ref2","val","slice","key","filterOption","Tag","closable","onClose","_ref3","_e$nativeEvent","_e$nativeEvent$stopIm","_tagProps$onClose","nativeEvent","stopImmediatePropagation","_getSelectedOptions5","_ref4","parseContentTNode","updateScrollTop","content","firstSelectedNode","querySelector","_getComputedStyle","getComputedStyle","paddingBottom","_getComputedStyle2","marginBottom","elementBottomHeight","parseInt","updateValue","getOffsetTopToContainer","offsetTop","clientHeight","setTimeout","scrollTop","onMouseEnter","onMouseLeave","handleEnter","_","handleScroll","_ref5","debounceOnScrollBottom","debounce","_e$target","target","scrollHeight","Math","floor","SelectInput","width","composeRefs","autofocus","allowInput","status","tips","suffix","panel","popupVisible","displayName"],"mappings":"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"}
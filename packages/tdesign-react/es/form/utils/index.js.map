{"version":3,"file":"index.js","sources":["../../../../components/form/utils/index.ts"],"sourcesContent":["import { has, get, isObject, isArray, isEmpty } from 'lodash-es';\nimport type { NamePath } from '../type';\n\n// 获取 formMap 管理的数据\nexport function getMapValue(\n  name: NamePath,\n  formMapRef: React.RefObject<Map<any, any>>,\n) {\n  if (!formMapRef.current) return;\n\n  // 提取所有 map key\n  const mapKeys = [...formMapRef.current.keys()];\n  // 转译为字符串后比对 key 兼容数组格式\n  const key = mapKeys.find((key) => String(key) === String(name));\n  // 拿到 key 引用地址获取 value\n  return formMapRef.current.get(key);\n}\n\n// { user: { name: '' } } => [['user', 'name']]\n// 不处理数组类型\n// { user: [{ name: '' }]} => [['user']]\nexport function objectToArray(obj: Record<string | number, any>) {\n  const result: (string | number)[][] = [];\n\n  function traverse(current: any, path: string[] = []) {\n    if (isObject(current) && !isArray(current) && !isEmpty(current)) {\n      Object.keys(current).forEach((key) => {\n        traverse(current[key], [...path, key]);\n      });\n    } else {\n      result.push(path);\n    }\n  }\n\n  traverse(obj);\n  return result;\n}\n\n// 将数据整理成对象，数组 name 转化嵌套对象: ['user', 'name'] => { user: { name: '' } }\nexport function calcFieldValue(name: NamePath, value: any, isFormList = true) {\n  if (Array.isArray(name)) {\n    if (isFormList) {\n      const fieldValue = name.reduceRight((prev, curr) => {\n        const arr = [];\n        if (/^\\d+$/.test(String(curr))) arr[curr] = prev;\n        return arr.length ? arr : { [curr]: prev };\n      }, value);\n      return { ...fieldValue };\n    }\n    return name.reduceRight((prev, curr, currentIndex) => {\n      if (currentIndex === name.length - 1) {\n        return { [curr]: value };\n      }\n      return { [curr]: prev };\n    }, {});\n  }\n\n  return { [name]: value };\n}\n\n// 通过对象数据类型获取 map 引用: { user: { name: '' } } => formMap.get(['user', 'name'])\nexport function travelMapFromObject(\n  obj: Record<any, any>,\n  formMapRef: React.RefObject<Map<any, any>>,\n  callback: Function,\n) {\n  for (const [mapName, formItemRef] of formMapRef.current.entries()) {\n    if (has(obj, mapName)) {\n      callback(formItemRef, get(obj, mapName));\n    }\n  }\n}\n"],"names":["getMapValue","name","formMapRef","current","mapKeys","keys","key","find","String","get","objectToArray","obj","result","traverse","path","arguments","length","undefined","isObject","isArray","isEmpty","Object","forEach","concat","_toConsumableArray","push","calcFieldValue","value","isFormList","Array","fieldValue","reduceRight","prev","curr","arr","test","_defineProperty","_objectSpread","currentIndex","travelMapFromObject","callback","_iterator","_createForOfIteratorHelper","entries","_step","s","n","done","_step$value","_slicedToArray","mapName","formItemRef","has","err","e","f"],"mappings":"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"}
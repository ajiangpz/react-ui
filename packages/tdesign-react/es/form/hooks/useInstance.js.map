{"version":3,"file":"useInstance.js","sources":["../../../../components/form/hooks/useInstance.tsx"],"sourcesContent":["import { isEmpty, isFunction, isEqual, merge, get, set } from 'lodash-es';\n// import log from '@tdesign/common-js/log/index';\nimport type {\n  TdFormProps,\n  FormValidateResult,\n  FormResetParams,\n  FormValidateMessage,\n  AllValidateResult,\n  NamePath,\n} from '../type';\nimport useConfig from '../../hooks/useConfig';\nimport { getMapValue, objectToArray, travelMapFromObject, calcFieldValue } from '../utils';\n\n// 检测是否需要校验 默认全量校验\nfunction needValidate(name: NamePath, fields: string[]) {\n  if (!fields || !Array.isArray(fields)) return true;\n  return fields.some((item) => String(item) === String(name));\n}\n\n// 整理校验结果\nfunction formatValidateResult(validateResultList) {\n  const result = validateResultList.reduce((r, err) => Object.assign(r || {}, err), {});\n  Object.keys(result).forEach((key) => {\n    if (result[key] === true) {\n      delete result[key];\n    } else {\n      result[key] = result[key].filter((fr: AllValidateResult) => fr.result === false);\n    }\n\n    // 整理嵌套数据\n    if (result[key] && key.includes(',')) {\n      const keyList = key.split(',');\n      const fieldValue = calcFieldValue(keyList, result[key]);\n      merge(result, fieldValue);\n      delete result[key];\n    }\n  });\n  return isEmpty(result) ? true : result;\n}\n\nexport default function useInstance(\n  props: TdFormProps,\n  formRef,\n  formMapRef: React.MutableRefObject<Map<any, any>>,\n  floatingFormDataRef: React.RefObject<Record<any, any>>,\n) {\n  const { classPrefix } = useConfig();\n\n  const { scrollToFirstError, preventSubmitDefault = true, onSubmit, onReset } = props;\n\n  // 获取第一个错误表单\n  function getFirstError(r: FormValidateResult<FormData>) {\n    if (r === true) return;\n    const [firstKey] = Object.keys(r);\n    if (scrollToFirstError) {\n      scrollTo(`.${classPrefix}-form--has-error`);\n    }\n    return r[firstKey][0]?.message;\n  }\n\n  // 校验不通过时，滚动到第一个错误表单\n  function scrollTo(selector: string) {\n    const dom = formRef.current.querySelector?.(selector);\n    const behavior = scrollToFirstError as ScrollBehavior;\n    dom && dom.scrollIntoView({ behavior });\n  }\n\n  // 对外方法 手动提交表单\n  function submit(e?: React.FormEvent<HTMLFormElement>) {\n    if (preventSubmitDefault) {\n      e?.preventDefault?.();\n      e?.stopPropagation?.();\n    }\n    validate().then((r) => {\n      const firstError = getFirstError(r);\n      const fields = getFieldsValue(true);\n      onSubmit?.({ validateResult: r, firstError, e, fields });\n    });\n  }\n\n  // 对外方法，该方法会触发全部表单组件错误信息显示\n  async function validate(param?: Record<string, any>): Promise<FormValidateResult<FormData>> {\n    const { fields, trigger = 'all', showErrorMessage } = param || {};\n    const list = [...formMapRef.current.values()]\n      .filter(\n        (formItemRef) => isFunction(formItemRef?.current?.validate) && needValidate(formItemRef?.current?.name, fields),\n      )\n      .map((formItemRef) => formItemRef?.current.validate(trigger, showErrorMessage));\n\n    const validateList = await Promise.all(list);\n    return formatValidateResult(validateList);\n  }\n\n  // 对外方法，该方法只会校验不会触发信息提示\n  async function validateOnly(param?: Record<string, any>): Promise<FormValidateResult<FormData>> {\n    const { fields, trigger = 'all' } = param || {};\n    const list = [...formMapRef.current.values()]\n      .filter(\n        (formItemRef) =>\n          isFunction(formItemRef?.current?.validateOnly) && needValidate(formItemRef?.current?.name, fields),\n      )\n      .map((formItemRef) => formItemRef?.current.validateOnly?.(trigger));\n\n    const validateList = await Promise.all(list);\n    return formatValidateResult(validateList);\n  }\n\n  // 对外方法，获取对应 formItem 的值\n  function getFieldValue(name: NamePath) {\n    if (!name) return null;\n\n    const formItemRef = getMapValue(name, formMapRef);\n    return formItemRef?.current?.getValue?.();\n  }\n\n  // 对外方法，获取一组字段名对应的值，当调用 getFieldsValue(true) 时返回所有值\n  function getFieldsValue(nameList: string[] | boolean) {\n    const fieldsValue = {};\n\n    if (nameList === true) {\n      // 嵌套数组子节点先添加导致外层数据覆盖因而需要倒序遍历\n      for (const [name, formItemRef] of [...formMapRef.current.entries()].reverse()) {\n        let fieldValue = null;\n        if (formItemRef?.current.isFormList) {\n          fieldValue = calcFieldValue(name, formItemRef?.current.getValue?.());\n        } else {\n          fieldValue = calcFieldValue(name, formItemRef?.current.getValue?.(), !props.supportNumberKey);\n        }\n        merge(fieldsValue, fieldValue);\n      }\n    } else {\n      if (!Array.isArray(nameList)) {\n        console.error('Form', '`getFieldsValue` 参数需要 Array 类型');\n        return {};\n      }\n\n      nameList.forEach((name) => {\n        const formItemRef = getMapValue(name, formMapRef);\n        if (!formItemRef) return;\n\n        const fieldValue = calcFieldValue(name, formItemRef?.current.getValue?.());\n        merge(fieldsValue, fieldValue);\n      });\n    }\n    return fieldsValue;\n  }\n\n  // 对外方法，设置对应 formItem 的值\n  function setFieldsValue(fields = {}) {\n    const nameLists = objectToArray(fields);\n\n    nameLists.forEach((nameList) => {\n      const fieldValue = get(fields, nameList);\n\n      let formItemRef;\n      if (nameList.length > 1) {\n        // 如果是数组，由于内存地址不一致，不能直接使用 Map.get 获取到 formItemRef\n        for (const [mapNameList, _formItemRef] of formMapRef.current.entries()) {\n          if (isEqual(nameList, mapNameList)) {\n            formItemRef = _formItemRef;\n            break;\n          }\n        }\n      } else {\n        formItemRef = formMapRef.current.get(nameList[0]);\n      }\n\n      if (formItemRef?.current) {\n        formItemRef?.current?.setValue?.(fieldValue, fields);\n      } else {\n        set(floatingFormDataRef.current, nameList, fieldValue);\n      }\n    });\n  }\n\n  // 对外方法，设置对应 formItem 的数据\n  function setFields(fields = []) {\n    if (!Array.isArray(fields)) throw new Error('setFields 参数需要 Array 类型');\n\n    fields.forEach((field) => {\n      const { name, ...restFields } = field;\n      const formItemRef = getMapValue(name, formMapRef);\n\n      formItemRef?.current?.setField(restFields, field);\n    });\n  }\n\n  // 对外方法，重置对应 formItem 的数据\n  function reset(params: FormResetParams<FormData>) {\n    // reset all\n    if (typeof params === 'undefined') {\n      [...formMapRef.current.values()].forEach((formItemRef) => {\n        formItemRef?.current?.resetField();\n      });\n    } else {\n      const { type = 'initial', fields = [] } = params;\n\n      fields.forEach((name) => {\n        const formItemRef = getMapValue(name, formMapRef);\n        formItemRef?.current?.resetField(type);\n      });\n    }\n    onReset?.({});\n  }\n\n  // 对外方法，重置对应 formItem 的状态\n  function clearValidate(fields?: Array<keyof FormData>) {\n    // reset all\n    if (typeof fields === 'undefined') {\n      [...formMapRef.current.values()].forEach((formItemRef) => {\n        formItemRef?.current?.resetValidate();\n      });\n    } else {\n      if (!Array.isArray(fields)) throw new Error('clearValidate 参数需要 Array 类型');\n\n      fields.forEach((name) => {\n        const formItemRef = getMapValue(name, formMapRef);\n        formItemRef?.current?.resetValidate();\n      });\n    }\n  }\n\n  // 对外方法，设置 formItem 的错误信息\n  function setValidateMessage(message: FormValidateMessage<FormData>) {\n    travelMapFromObject(message, formMapRef, (formItemRef, fieldValue) => {\n      formItemRef?.current?.setValidateMessage?.(fieldValue);\n    });\n  }\n\n  // 对外方法，获取 formItem 的错误信息\n  function getValidateMessage(fields?: Array<keyof FormData>) {\n    const message = {};\n\n    if (typeof fields === 'undefined') {\n      [...formMapRef.current.values()].forEach((formItemRef) => {\n        const item = formItemRef?.current?.getValidateMessage?.();\n        if (isEmpty(item)) return;\n        message[formItemRef?.current?.name] = item;\n      });\n    } else {\n      if (!Array.isArray(fields)) throw new Error('getValidateMessage 参数需要 Array 类型');\n\n      fields.forEach((name) => {\n        const formItemRef = getMapValue(name, formMapRef);\n        const item = formItemRef?.current?.getValidateMessage?.();\n        if (isEmpty(item)) return;\n        message[formItemRef?.current?.name] = item;\n      });\n    }\n\n    if (isEmpty(message)) return;\n\n    return message;\n  }\n\n  return {\n    submit,\n    reset,\n    validate,\n    validateOnly,\n    clearValidate,\n    setFields,\n    setFieldsValue,\n    setValidateMessage,\n    getValidateMessage,\n    getFieldValue,\n    getFieldsValue,\n    currentElement: formRef.current,\n    getCurrentElement: () => formRef.current,\n  };\n}\n"],"names":["needValidate","name","fields","Array","isArray","some","item","String","formatValidateResult","validateResultList","result","reduce","r","err","Object","assign","keys","forEach","key","filter","fr","includes","keyList","split","fieldValue","calcFieldValue","merge","isEmpty","useInstance","props","formRef","formMapRef","floatingFormDataRef","_useConfig","useConfig","classPrefix","scrollToFirstError","_props$preventSubmitD","preventSubmitDefault","onSubmit","onReset","getFirstError","_r$firstKey$","_Object$keys","_Object$keys2","_slicedToArray","firstKey","scrollTo","concat","message","selector","_formRef$current$quer","_formRef$current","dom","current","querySelector","call","behavior","scrollIntoView","submit","e","_e$preventDefault","_e$stopPropagation","preventDefault","stopPropagation","validate","then","firstError","getFieldsValue","validateResult","_callee","param","_ref","_ref$trigger","trigger","showErrorMessage","list","validateList","_regeneratorRuntime","wrap","_context","prev","next","_toConsumableArray","values","formItemRef","_formItemRef$current16","_formItemRef$current17","isFunction","map","Promise","all","sent","abrupt","stop","_validate","apply","arguments","validateOnly","_callee2","_ref2","_ref2$trigger","_context2","_formItemRef$current18","_formItemRef$current19","_formItemRef$current$5","_formItemRef$current20","_validateOnly","getFieldValue","_formItemRef$current","_formItemRef$current$","getMapValue","getValue","nameList","fieldsValue","_iterator","_createForOfIteratorHelper","entries","reverse","_step","s","n","done","_step$value","value","isFormList","_formItemRef$current$2","_formItemRef$current2","_formItemRef$current$3","_formItemRef$current3","supportNumberKey","f","console","error","_formItemRef$current$4","_formItemRef$current4","setFieldsValue","length","undefined","nameLists","objectToArray","_formItemRef2","get","_iterator2","_step2","_step2$value","mapNameList","_formItemRef","isEqual","_formItemRef3","_formItemRef3$setValu","setValue","set","setFields","Error","field","_formItemRef$current5","restFields","_objectWithoutProperties","_excluded","setField","reset","params","_formItemRef$current6","resetField","_params$type","type","_params$fields","_formItemRef$current7","clearValidate","_formItemRef$current8","resetValidate","_formItemRef$current9","setValidateMessage","travelMapFromObject","_formItemRef$current0","_formItemRef$current1","getValidateMessage","_formItemRef$current10","_formItemRef$current11","_formItemRef$current12","_formItemRef$current13","_formItemRef$current14","_formItemRef$current15","currentElement","getCurrentElement"],"mappings":"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"}
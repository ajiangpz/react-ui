{"version":3,"file":"FormList.js","sources":["../../../components/form/FormList.tsx"],"sourcesContent":["import React, { useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport { flattenDeep, get, merge, set, unset } from 'lodash-es';\n// import log from '@tdesign/common-js/log/index';\nimport { FormListContext, useFormContext } from './FormContext';\nimport type { FormItemInstance } from './FormItem';\nimport { HOOK_MARK } from './hooks/useForm';\nimport type { FormListField, FormListFieldOperation, TdFormListProps } from './type';\nimport { calcFieldValue } from './utils';\n\nlet key = 0;\n\nconst FormList: React.FC<TdFormListProps> = (props) => {\n  const {\n    formMapRef,\n    form,\n    onFormItemValueChange,\n    initialData: initialDataFromForm,\n    resetType: resetTypeFromContext,\n  } = useFormContext();\n  const { name, rules, children } = props;\n\n  const initialData = props.initialData || get(initialDataFromForm, name) || [];\n\n  const [formListValue, setFormListValue] = useState(initialData);\n  const [fields, setFields] = useState<Array<FormListField>>(() =>\n    initialData.map((data, index) => ({\n      data: { ...data },\n      key: (key += 1),\n      name: index,\n      isListField: true,\n    })),\n  );\n  const formListMapRef = useRef(new Map()); // 收集 formItem 实例\n  const formListRef = useRef<FormItemInstance>(null); // 当前 formList 实例\n  const fieldsTaskQueueRef = useRef([]); // 记录更改 fields 数据后 callback 队列\n  const snakeName = []\n    .concat(name)\n    .filter((item) => item !== undefined)\n    .toString(); // 转化 name\n\n  const isMounted = useRef(false);\n\n  useEffect(\n    () => () => {\n      isMounted.current = false;\n    },\n    [],\n  );\n\n  const operation: FormListFieldOperation = {\n    add(defaultValue?: any, insertIndex?: number) {\n      const cloneFields = [...fields];\n      const index = insertIndex ?? cloneFields.length;\n      cloneFields.splice(index, 0, {\n        key: (key += 1),\n        name: index,\n        isListField: true,\n      });\n      cloneFields.forEach((field, index) => Object.assign(field, { name: index }));\n      setFields(cloneFields);\n\n      const nextFormListValue = [...formListValue];\n      if (typeof defaultValue !== 'undefined') {\n        nextFormListValue[index] = defaultValue;\n        setFormListValue(nextFormListValue);\n      }\n\n      set(form?.store, flattenDeep([name, index]), nextFormListValue);\n\n      const fieldValue = calcFieldValue(name, nextFormListValue);\n      requestAnimationFrame(() => {\n        onFormItemValueChange?.({ ...fieldValue });\n      });\n    },\n    remove(index: number | number[]) {\n      const nextFields = fields\n        .filter((item) => {\n          if (Array.isArray(index)) return !index.includes(item.name);\n          return item.name !== index;\n        })\n        .map((field, i) => ({ ...field, name: i }));\n      setFields(nextFields);\n\n      const nextFormListValue = formListValue.filter((_, idx) => idx !== index);\n      setFormListValue(nextFormListValue);\n\n      unset(form?.store, flattenDeep([name, index]));\n\n      const fieldValue = calcFieldValue(name, nextFormListValue);\n      requestAnimationFrame(() => {\n        onFormItemValueChange?.({ ...fieldValue });\n      });\n    },\n    move(from: number, to: number) {\n      const cloneFields = [...fields];\n      const fromItem = { ...cloneFields[from] };\n      const toItem = { ...cloneFields[to] };\n      cloneFields[to] = fromItem;\n      cloneFields[from] = toItem;\n      set(form?.store, name, []);\n      setFields(cloneFields);\n    },\n  };\n\n  // 外部设置 fields 优先级最高，可以更改渲染的节点\n  function setListFields(fieldData: any[], callback: Function, originData) {\n    setFields(\n      fieldData.map((_, index) => ({\n        key: (key += 1),\n        name: index,\n        isListField: true,\n      })),\n    );\n    // 添加至队列中 等待下次渲染完成执行对应逻辑\n    fieldsTaskQueueRef.current.push({ callback, fieldData, originData });\n  }\n\n  useEffect(() => {\n    if (!name || !formMapRef) return;\n    formMapRef.current.set(name, formListRef);\n\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      formMapRef.current.delete(name);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [snakeName]);\n\n  useEffect(() => {\n    [...formListMapRef.current.values()].forEach((formItemRef) => {\n      if (!formItemRef.current) return;\n      const { name, isUpdated } = formItemRef.current;\n      if (isUpdated) return; // 内部更新过值则跳过\n\n      const data = get(formListValue, name);\n      formItemRef.current.setField({ value: data, status: 'not' });\n    });\n  }, [formListValue]);\n\n  useEffect(() => {\n    if (!isMounted.current) {\n      isMounted.current = true;\n      return;\n    }\n    // fields 变化通知 watch 事件\n    form?.getInternalHooks?.(HOOK_MARK)?.notifyWatch?.(name);\n\n    // 等待子节点渲染完毕\n    Promise.resolve().then(() => {\n      if (!fieldsTaskQueueRef.current.length) return;\n\n      // fix multiple formlist stuck\n      const currentQueue = fieldsTaskQueueRef.current.pop();\n      const { fieldData, callback, originData } = currentQueue;\n\n      [...formListMapRef.current.values()].forEach((formItemRef) => {\n        if (!formItemRef.current) return;\n\n        const { name: itemName } = formItemRef.current;\n        const data = get(fieldData, itemName);\n        callback(formItemRef, data);\n      });\n\n      // formList 嵌套 formList\n      if (!formMapRef || !formMapRef.current) return;\n      [...formMapRef.current.values()].forEach((formItemRef) => {\n        if (!formItemRef.current) return;\n\n        const { name: itemName, isFormList } = formItemRef.current;\n        if (String(itemName) === String(name) || !isFormList) return;\n        const data = get(originData, itemName);\n        if (data) callback(formItemRef, data);\n      });\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [form, snakeName, fields, formMapRef]);\n\n  useImperativeHandle(\n    formListRef,\n    (): FormItemInstance => ({\n      name,\n      isFormList: true,\n      getValue() {\n        const formListValue = [];\n        [...formListMapRef.current.values()].forEach((formItemRef) => {\n          if (!formItemRef.current) return;\n\n          const { name, getValue } = formItemRef.current;\n          const fieldValue = calcFieldValue(name, getValue());\n          merge(formListValue, fieldValue);\n        });\n        return formListValue;\n      },\n      validate: (trigger = 'all') => {\n        const resultList = [];\n        const validates = [...formListMapRef.current.values()].map((formItemRef) =>\n          formItemRef?.current?.validate?.(trigger),\n        );\n        return new Promise((resolve) => {\n          Promise.all(validates).then((validateResult) => {\n            validateResult.forEach((result) => {\n              const errorValue = Object.values(result)[0];\n              merge(resultList, errorValue);\n            });\n            const errorItems = validateResult.filter((item) => Object.values(item)[0] !== true);\n            if (errorItems.length) {\n              resolve({ [snakeName]: resultList });\n            } else {\n              resolve({ [snakeName]: true });\n            }\n          });\n        });\n      },\n      // TODO 支持局部更新数据\n      setValue: (fieldData: any[], originData) => {\n        setListFields(\n          fieldData,\n          (formItemRef, data) => {\n            formItemRef?.current?.setValue?.(data);\n          },\n          originData,\n        );\n      },\n      setField: (fieldData: { value?: any[]; status?: string }, originData) => {\n        const { value, status } = fieldData;\n        setListFields(\n          value,\n          (formItemRef, data) => {\n            formItemRef?.current?.setField?.({ value: data, status });\n          },\n          originData,\n        );\n      },\n      resetField: (type: string) => {\n        const resetType = type || resetTypeFromContext;\n\n        if (resetType === 'initial') {\n          setFormListValue(initialData);\n\n          const newFields = initialData.map((data, index) => ({\n            data: { ...data },\n            key: (key += 1),\n            name: index,\n            isListField: true,\n          }));\n          setFields(newFields);\n          set(form?.store, flattenDeep([name]), initialData);\n\n          requestAnimationFrame(() => {\n            [...formListMapRef.current.values()].forEach((formItemRef) => {\n              if (!formItemRef.current) return;\n              const { name: itemName } = formItemRef.current;\n              const itemValue = get(initialData, itemName);\n              if (itemValue !== undefined) {\n                formItemRef.current.setField({ value: itemValue, status: 'not' });\n              }\n            });\n          });\n        } else {\n          // 重置为空\n          [...formListMapRef.current.values()].forEach((formItemRef) => {\n            formItemRef?.current?.resetField?.();\n          });\n\n          fieldsTaskQueueRef.current = [];\n\n          setFormListValue([]);\n          setFields([]);\n          unset(form?.store, flattenDeep([name]));\n        }\n      },\n      setValidateMessage: (fieldData) => {\n        [...formListMapRef.current.values()].forEach((formItemRef) => {\n          if (!formItemRef.current) return;\n\n          const { name } = formItemRef.current;\n          const data = get(fieldData, name);\n\n          formItemRef?.current?.setValidateMessage?.(data);\n        });\n      },\n      resetValidate: () => {\n        [...formListMapRef.current.values()].forEach((formItemRef) => {\n          formItemRef?.current?.resetValidate?.();\n        });\n      },\n    }),\n  );\n\n  if (typeof children !== 'function') {\n    console.error('Form', `FormList's children must be a function!`);\n    return null;\n  }\n\n  return (\n    <FormListContext.Provider value={{ name, rules, formListMapRef, initialData, form }}>\n      {children(fields, operation)}\n    </FormListContext.Provider>\n  );\n};\n\nFormList.displayName = 'FormList';\n\nexport default FormList;\n"],"names":["key","FormList","props","_useFormContext","useFormContext","formMapRef","form","onFormItemValueChange","initialDataFromForm","initialData","resetTypeFromContext","resetType","name","rules","children","get","_useState","useState","_useState2","_slicedToArray","formListValue","setFormListValue","_useState3","map","data","index","_objectSpread","isListField","_useState4","fields","setFields","formListMapRef","useRef","Map","formListRef","fieldsTaskQueueRef","snakeName","concat","filter","item","toString","isMounted","useEffect","current","operation","add","defaultValue","insertIndex","cloneFields","_toConsumableArray","length","splice","forEach","field","Object","assign","nextFormListValue","set","store","flattenDeep","fieldValue","calcFieldValue","requestAnimationFrame","remove","nextFields","Array","isArray","includes","i","_","idx","unset","move","from","to","fromItem","toItem","setListFields","fieldData","callback","originData","push","values","formItemRef","_formItemRef$current","isUpdated","setField","value","status","_form$getInternalHook","_form$getInternalHook2","getInternalHooks","call","HOOK_MARK","notifyWatch","Promise","resolve","then","currentQueue","pop","itemName","_formItemRef$current2","isFormList","String","useImperativeHandle","getValue","_formItemRef$current3","merge","validate","trigger","arguments","undefined","resultList","validates","_formItemRef$current4","_formItemRef$current5","all","validateResult","result","errorValue","errorItems","_defineProperty","setValue","_formItemRef$current6","_formItemRef$current7","_formItemRef$current8","_formItemRef$current9","resetField","type","newFields","itemValue","_formItemRef$current0","_formItemRef$current1","setValidateMessage","_formItemRef$current10","_formItemRef$current11","resetValidate","_formItemRef$current12","_formItemRef$current13","console","error","React","createElement","FormListContext","Provider","displayName"],"mappings":"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"}
{"version":3,"file":"useTagList.js","sources":["../../../components/tag-input/useTagList.tsx"],"sourcesContent":["import React, {\n  useState,\n  MouseEvent,\n  KeyboardEvent,\n  ReactNode,\n  Fragment,\n} from 'react';\nimport { isFunction } from 'lodash-es';\nimport { TagInputChangeContext, TagInputValue, TdTagInputProps } from './type';\nimport { InputValue } from '../input';\nimport { Tag } from '../tag';\nimport useConfig from '../hooks/useConfig';\nimport useControlled from '../hooks/useControlled';\nimport { DragSortInnerProps } from '../hooks/useDragSorter';\n\nexport type ChangeParams = [TagInputChangeContext];\n\ninterface TagInputProps extends TdTagInputProps, DragSortInnerProps {\n  options?: any[]; // 参数穿透options, 给SelectInput/SelectInput 自定义选中项呈现的内容和多选状态下设置折叠项内容\n}\n\nexport default function useTagList(props: TagInputProps) {\n  const { classPrefix: prefix } = useConfig();\n  const {\n    onRemove,\n    max,\n    minCollapsedNum,\n    size,\n    disabled,\n    readonly,\n    tagProps,\n    tag,\n    collapsedItems,\n    getDragProps,\n  } = props;\n  const [tagValue, setTagValue] = useControlled(props, 'value', props.onChange);\n  const [oldInputValue, setOldInputValue] = useState<InputValue>();\n\n  const onClose = (p: { e?: MouseEvent<SVGSVGElement>; index: number }) => {\n    const arr = [...tagValue];\n    const [item] = arr.splice(p.index, 1);\n    setTagValue(arr, { trigger: 'tag-remove', ...p, item });\n    onRemove?.({ ...p, item, trigger: 'tag-remove', value: arr });\n  };\n\n  const clearAll = (context: { e: MouseEvent<SVGSVGElement> }) => {\n    setTagValue([], { trigger: 'clear', e: context.e });\n  };\n\n  // 按下 Enter 键，新增标签\n  const onInnerEnter = (\n    value: InputValue,\n    context: { e: KeyboardEvent<HTMLInputElement> },\n  ) => {\n    const valueStr = value ? String(value).trim() : '';\n    let newValue: TagInputValue = tagValue;\n    const isLimitExceeded = max && tagValue?.length >= max;\n    if (valueStr && !isLimitExceeded) {\n      newValue =\n        tagValue instanceof Array\n          ? tagValue.concat(String(valueStr))\n          : [valueStr];\n      setTagValue(newValue, {\n        trigger: 'enter',\n        index: newValue.length - 1,\n        item: valueStr,\n        e: context.e,\n      });\n    }\n    props?.onEnter?.(newValue, { ...context, inputValue: value });\n  };\n\n  const onInputBackspaceKeyUp = (value: InputValue) => {\n    if (!tagValue || !tagValue.length) return;\n    setOldInputValue(value);\n  };\n\n  // 按下回退键，删除标签\n  const onInputBackspaceKeyDown = (\n    value: InputValue,\n    context: { e: KeyboardEvent<HTMLInputElement> },\n  ) => {\n    const { e } = context;\n    if (!tagValue || !tagValue.length || readonly) return;\n    // 回车键删除，输入框值为空时，才允许 Backspace 删除标签\n    if (!value && ['Backspace', 'NumpadDelete'].includes(e.key)) {\n      const index = tagValue.length - 1;\n      const item = tagValue[index];\n      const trigger = 'backspace';\n      const newValue = tagValue.slice(0, -1);\n      setTagValue(newValue, { e, index, item, trigger });\n      onRemove?.({ e, index, item, trigger, value: newValue });\n    }\n  };\n\n  const renderLabel = ({\n    displayNode,\n    label,\n  }: {\n    displayNode: ReactNode;\n    label: ReactNode;\n  }) => {\n    const newList = minCollapsedNum\n      ? tagValue.slice(0, minCollapsedNum)\n      : tagValue;\n\n    const list = displayNode\n      ? [<Fragment key=\"display-node\">{displayNode}</Fragment>]\n      : newList?.map((item, index) => {\n        const tagContent = isFunction(tag) ? tag({ value: item }) : tag;\n        return (\n          <Tag\n            key={index}\n            size={size}\n            disabled={disabled}\n            onClose={(context) => onClose({ e: context.e, index })}\n            closable={!readonly && !disabled}\n            {...getDragProps?.(index, item)}\n            {...tagProps}\n          >\n            {tagContent ?? item}\n          </Tag>\n        );\n      });\n    if (label) {\n      list?.unshift(\n        <div className={`${prefix}-tag-input__prefix`} key=\"label\">\n          {label}\n        </div>,\n      );\n    }\n    // 超出省略\n    if (newList.length !== tagValue.length) {\n      const len = tagValue.length - newList.length;\n      // 这里会从selectInput/SelectInput中传递options参数，用于自定义选中项呈现的内容和多选状态下设置折叠项内容\n      const options = Array.isArray(props?.options) ? props.options : tagValue;\n      const params = {\n        value: tagValue,\n        count: tagValue.length - minCollapsedNum,\n        collapsedTags: tagValue.slice(minCollapsedNum, tagValue.length),\n        collapsedSelectedItems: options.slice(minCollapsedNum, tagValue.length),\n        onClose,\n      };\n      const more = isFunction(collapsedItems)\n        ? collapsedItems(params)\n        : collapsedItems;\n      list.push(\n        <Fragment key=\"more\">\n          {more ?? (\n            <Tag size={size} {...tagProps}>\n              +{len}\n            </Tag>\n          )}\n        </Fragment>,\n      );\n    }\n    return list;\n  };\n  return {\n    tagValue,\n    clearAll,\n    onClose,\n    onInnerEnter,\n    onInputBackspaceKeyDown,\n    onInputBackspaceKeyUp,\n    renderLabel,\n  };\n}\n"],"names":["useTagList","props","_useConfig","useConfig","prefix","classPrefix","onRemove","max","minCollapsedNum","size","disabled","readonly","tagProps","tag","collapsedItems","getDragProps","_useControlled","useControlled","onChange","_useControlled2","_slicedToArray","tagValue","setTagValue","_useState","useState","_useState2","oldInputValue","setOldInputValue","onClose","p","arr","_toConsumableArray","_arr$splice","splice","index","_arr$splice2","item","trigger","_objectSpread","value","clearAll","context","e","onInnerEnter","_props$onEnter","valueStr","String","trim","newValue","isLimitExceeded","length","Array","concat","onEnter","call","inputValue","onInputBackspaceKeyUp","onInputBackspaceKeyDown","includes","key","slice","renderLabel","displayNode","_ref","label","newList","list","React","createElement","Fragment","map","tagContent","isFunction","Tag","closable","unshift","className","len","options","isArray","params","count","collapsedTags","collapsedSelectedItems","more","push"],"mappings":"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"}
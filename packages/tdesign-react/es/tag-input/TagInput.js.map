{"version":3,"file":"TagInput.js","sources":["../../../components/tag-input/hooks/useTagScroll.ts","../../../components/tag-input/hooks/useHover.ts","../../../components/tag-input/defaultProps.ts","../../../components/tag-input/TagInput.tsx"],"sourcesContent":["/**\n * 当标签数量过多时，输入框显示不下，则需要滚动查看，以下为滚动逻辑\n * 如果标签过多时的处理方式，是标签省略，则不需要此功能\n */\n\nimport { isFunction } from 'lodash-es';\nimport { useRef, useEffect, useState, WheelEvent } from 'react';\nimport { TdTagInputProps } from '../type';\n\nlet mouseEnterTimer: ReturnType<typeof setTimeout> | null = null;\n\nexport default function useTagScroll(props: TdTagInputProps) {\n  const tagInputRef = useRef<{ currentElement: HTMLDivElement }>(null);\n  const { excessTagsDisplayType = 'scroll', readonly, disabled } = props;\n  // 允许向右滚动的最大距离\n  const [scrollDistance, setScrollDistance] = useState(0);\n  const [scrollElement, setScrollElement] = useState<HTMLDivElement>();\n\n  const updateScrollElement = (element: HTMLDivElement) => {\n    const scrollElement = element.children[0] as HTMLDivElement;\n    setScrollElement(scrollElement);\n  };\n\n  const updateScrollDistance = () => {\n    if (!scrollElement) return;\n    setScrollDistance(scrollElement.scrollWidth - scrollElement.clientWidth);\n  };\n\n  const scrollTo = (distance: number) => {\n    if (isFunction(scrollElement?.scroll)) {\n      scrollElement.scroll({ left: distance, behavior: 'smooth' });\n    }\n  };\n\n  const scrollToRight = () => {\n    updateScrollDistance();\n    scrollTo(scrollDistance);\n  };\n\n  const scrollToLeft = () => {\n    scrollTo(0);\n  };\n\n  // TODO：MAC 电脑横向滚动，Windows 纵向滚动。当前只处理了横向滚动\n  const onWheel = ({ e }: { e: WheelEvent<HTMLDivElement> }) => {\n    if (readonly || disabled) return;\n    if (!scrollElement) return;\n    if (e.deltaX > 0) {\n      const distance = Math.min(scrollElement.scrollLeft + 120, scrollDistance);\n      scrollTo(distance);\n    } else {\n      const distance = Math.max(scrollElement.scrollLeft - 120, 0);\n      scrollTo(distance);\n    }\n  };\n\n  // 鼠标 hover，自动滑动到最右侧，以便输入新标签\n  const scrollToRightOnEnter = () => {\n    if (excessTagsDisplayType !== 'scroll') return;\n    // 一闪而过的 mousenter 不需要执行\n    mouseEnterTimer = setTimeout(() => {\n      scrollToRight();\n      if (mouseEnterTimer) clearTimeout(mouseEnterTimer);\n    }, 100);\n  };\n\n  const scrollToLeftOnLeave = () => {\n    if (excessTagsDisplayType !== 'scroll') return;\n    scrollTo(0);\n    if (mouseEnterTimer) {\n      clearTimeout(mouseEnterTimer);\n    }\n  };\n\n  const clearScroll = () => {\n    if (mouseEnterTimer) clearTimeout(mouseEnterTimer);\n  };\n\n  const initScroll = (element: HTMLDivElement) => {\n    if (!element) return;\n    updateScrollElement(element);\n  };\n\n  useEffect(() => {\n    if (tagInputRef.current) initScroll(tagInputRef?.current?.currentElement);\n    return clearScroll;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return {\n    initScroll,\n    clearScroll,\n    tagInputRef,\n    scrollElement,\n    scrollDistance,\n    scrollTo,\n    scrollToRight,\n    scrollToLeft,\n    updateScrollElement,\n    updateScrollDistance,\n    onWheel,\n    scrollToRightOnEnter,\n    scrollToLeftOnLeave,\n  };\n}\n","import { useState, MouseEvent } from 'react';\nimport { TdTagInputProps } from '../type';\n\nexport interface UseHoverParams {\n  readonly: boolean;\n  disabled: boolean;\n  onMouseenter: (context: { e: MouseEvent<HTMLDivElement> }) => void;\n  onMouseleave: (context: { e: MouseEvent<HTMLDivElement> }) => void;\n}\n\nexport default function useHover(props: TdTagInputProps) {\n  const { readonly, disabled, onMouseenter, onMouseleave } = props;\n  const [isHover, setIsHover] = useState<boolean>(false);\n\n  const addHover = (context: Parameters<UseHoverParams['onMouseenter']>[0]) => {\n    if (readonly || disabled) return;\n    setIsHover(true);\n    onMouseenter?.(context);\n  };\n\n  const cancelHover = (\n    context: Parameters<UseHoverParams['onMouseleave']>[0],\n  ) => {\n    if (readonly || disabled) return;\n    setIsHover(false);\n    onMouseleave?.(context);\n  };\n\n  return { isHover, addHover, cancelHover };\n}\n","import { TdTagInputProps } from './type';\n\nexport const tagInputDefaultProps: TdTagInputProps = {\n  autoWidth: false,\n  borderless: false,\n  clearable: false,\n  dragSort: false,\n  excessTagsDisplayType: 'break-line',\n  defaultInputValue: '',\n  minCollapsedNum: 0,\n  placeholder: undefined,\n  readonly: false,\n  size: 'medium',\n  defaultValue: [],\n};\n","import React, {\n  CompositionEvent,\n  KeyboardEvent,\n  useRef,\n  useImperativeHandle,\n  forwardRef,\n  MouseEvent,\n} from 'react';\nimport { XCircle } from 'lucide-react';\nimport { isFunction } from 'lodash-es';\nimport classnames from 'classnames';\nimport useConfig from '../hooks/useConfig';\nimport TInput, { InputValue, InputRef } from '../input';\nimport { TdTagInputProps } from './type';\nimport useTagList from './hooks/useTagList';\nimport useTagScroll from './hooks/useTagScroll';\nimport useHover from './hooks/useHover';\nimport useControlled from '../hooks/useControlled';\nimport { StyledProps } from '../common';\nimport { tagInputDefaultProps } from './defaultProps';\nimport useDefaultProps from '../hooks/useDefaultProps';\nimport useGlobalIcon from '../hooks/useGlobalIcon';\nimport useDragSorter from '../hooks/useDragSorter';\n\nexport interface TagInputProps extends TdTagInputProps, StyledProps {\n  options?: any[]; // 参数穿透options, 给SelectInput/SelectInput 自定义选中项呈现的内容和多选状态下设置折叠项内容\n}\n\nconst TagInput = forwardRef<InputRef, TagInputProps>((originalProps, ref) => {\n  const props = useDefaultProps<TagInputProps>(\n    originalProps,\n    tagInputDefaultProps,\n  );\n  const { classPrefix: prefix } = useConfig();\n\n  const { CloseCircleFilledIcon } = useGlobalIcon({\n    CloseCircleFilledIcon: XCircle,\n  });\n\n  const {\n    excessTagsDisplayType,\n    autoWidth,\n    borderless,\n    readonly,\n    disabled,\n    clearable,\n    placeholder,\n    valueDisplay,\n    label,\n    inputProps,\n    size,\n    tips,\n    status,\n    suffixIcon,\n    suffix,\n    prefixIcon,\n    maxRows,\n    onClick,\n    onPaste,\n    onFocus,\n    onBlur,\n  } = props;\n\n  const [tInputValue, setTInputValue] = useControlled(\n    props,\n    'inputValue',\n    props.onInputChange,\n  );\n\n  const { isHover, addHover, cancelHover } = useHover(props);\n  const { getDragProps } = useDragSorter({\n    ...props,\n    sortOnDraggable: props.dragSort,\n    onDragOverCheck: {\n      x: true,\n      targetClassNameRegExp: new RegExp(`^${prefix}-tag`),\n    },\n  });\n  const isCompositionRef = useRef(false);\n\n  const {\n    scrollToRight,\n    onWheel,\n    scrollToRightOnEnter,\n    scrollToLeftOnLeave,\n    tagInputRef,\n  } = useTagScroll(props);\n  // handle tag add and remove\n  const {\n    tagValue,\n    onClose,\n    onInnerEnter,\n    onInputBackspaceKeyUp,\n    clearAll,\n    renderLabel,\n    onInputBackspaceKeyDown,\n  } = useTagList({\n    ...props,\n    getDragProps,\n  });\n  const NAME_CLASS = `${prefix}-tag-input`;\n  const WITH_SUFFIX_ICON_CLASS = `${prefix}-tag-input__with-suffix-icon`;\n  const CLEAR_CLASS = `${prefix}-tag-input__suffix-clear`;\n  const BREAK_LINE_CLASS = `${prefix}-tag-input--break-line`;\n\n  const tagInputPlaceholder = !tagValue?.length ? placeholder : '';\n\n  const showClearIcon = Boolean(\n    !readonly && !disabled && clearable && isHover && tagValue?.length,\n  );\n\n  useImperativeHandle(ref as InputRef, () => ({\n    ...(tagInputRef.current || {}),\n  }));\n\n  const onInputCompositionstart = (\n    value: InputValue,\n    context: { e: CompositionEvent<HTMLInputElement> },\n  ) => {\n    isCompositionRef.current = true;\n    inputProps?.onCompositionstart?.(value, context);\n  };\n\n  const onInputCompositionend = (\n    value: InputValue,\n    context: { e: CompositionEvent<HTMLInputElement> },\n  ) => {\n    isCompositionRef.current = false;\n    inputProps?.onCompositionend?.(value, context);\n  };\n\n  const onInputEnter = (\n    value: InputValue,\n    context: { e: KeyboardEvent<HTMLInputElement> },\n  ) => {\n    setTInputValue('', { e: context.e, trigger: 'enter' });\n    !isCompositionRef.current && onInnerEnter(value, context);\n    scrollToRight();\n  };\n\n  const onInnerClick = (context: { e: MouseEvent<HTMLDivElement> }) => {\n    if (!props.disabled && !props.readonly) {\n      (tagInputRef.current as any)?.inputElement?.focus?.();\n    }\n    onClick?.(context);\n  };\n\n  const onClearClick = (e: MouseEvent<SVGSVGElement>) => {\n    clearAll({ e });\n    setTInputValue('', { e, trigger: 'clear' });\n    props.onClear?.({ e });\n  };\n\n  const suffixIconNode = showClearIcon ? (\n    <CloseCircleFilledIcon className={CLEAR_CLASS} onClick={onClearClick} />\n  ) : (\n    suffixIcon\n  );\n\n  // 自定义 Tag 节点\n  const displayNode = isFunction(valueDisplay)\n    ? valueDisplay({\n      value: tagValue,\n      onClose: (index) => onClose({ index }),\n    })\n    : valueDisplay;\n\n  const isEmpty = !(Array.isArray(tagValue) && tagValue.length);\n\n  const classes = [\n    NAME_CLASS,\n    {\n      [BREAK_LINE_CLASS]: excessTagsDisplayType === 'break-line',\n      [WITH_SUFFIX_ICON_CLASS]: !!suffixIconNode,\n      [`${prefix}-is-empty`]: isEmpty,\n      [`${prefix}-tag-input--with-tag`]: !isEmpty,\n      [`${prefix}-tag-input--max-rows`]:\n        excessTagsDisplayType === 'break-line' && maxRows,\n      [`${prefix}-tag-input--drag-sort`]:\n        props.dragSort && !disabled && !readonly,\n    },\n    props.className,\n  ];\n\n  const maxRowsStyle = maxRows\n    ? ({\n      '--max-rows': maxRows,\n      '--tag-input-size': size,\n    } as React.CSSProperties)\n    : {};\n\n  return (\n    <TInput\n      ref={tagInputRef as React.RefObject<InputRef>}\n      value={tInputValue}\n      onChange={(val, context) => {\n        setTInputValue(val, { ...context, trigger: 'input' });\n      }}\n      autoWidth={true} // 控制input_inner的宽度 设置为true让内部input不会提前换行\n      onWheel={onWheel}\n      size={size}\n      borderless={borderless}\n      readonly={readonly}\n      disabled={disabled}\n      label={renderLabel({ displayNode, label })}\n      className={classnames(classes)}\n      style={{\n        ...props.style,\n        ...maxRowsStyle,\n      }}\n      tips={tips}\n      status={status}\n      placeholder={tagInputPlaceholder}\n      suffix={suffix}\n      prefixIcon={prefixIcon}\n      suffixIcon={suffixIconNode}\n      showInput={!inputProps?.readonly || !tagValue || !tagValue?.length}\n      keepWrapperWidth={!autoWidth}\n      onPaste={onPaste}\n      onClick={onInnerClick}\n      onEnter={onInputEnter}\n      onKeydown={onInputBackspaceKeyDown}\n      onKeyup={onInputBackspaceKeyUp}\n      onMouseenter={(context) => {\n        addHover(context);\n        scrollToRightOnEnter();\n      }}\n      onMouseleave={(context) => {\n        cancelHover(context);\n        scrollToLeftOnLeave();\n      }}\n      onFocus={(inputValue, context) => {\n        onFocus?.(tagValue, { e: context.e, inputValue });\n      }}\n      onBlur={(inputValue, context) => {\n        if (tInputValue) {\n          setTInputValue('', { e: context.e, trigger: 'blur' });\n        }\n        onBlur?.(tagValue, { e: context.e, inputValue: '' });\n      }}\n      onCompositionstart={onInputCompositionstart}\n      onCompositionend={onInputCompositionend}\n      {...inputProps}\n    />\n  );\n});\n\nTagInput.displayName = 'TagInput';\n\nexport default TagInput;\n"],"names":["mouseEnterTimer","useTagScroll","props","tagInputRef","useRef","_props$excessTagsDisp","excessTagsDisplayType","readonly","disabled","_useState","useState","_useState2","_slicedToArray","scrollDistance","setScrollDistance","_useState3","_useState4","scrollElement","setScrollElement","updateScrollElement","element","children","updateScrollDistance","scrollWidth","clientWidth","scrollTo","distance","isFunction","scroll","left","behavior","scrollToRight","scrollToLeft","onWheel","_ref","e","deltaX","Math","min","scrollLeft","max","scrollToRightOnEnter","setTimeout","scrollToLeftOnLeave","clearTimeout","clearScroll","initScroll","useEffect","_tagInputRef$current","current","currentElement","useHover","onMouseenter","onMouseleave","isHover","setIsHover","addHover","context","cancelHover","tagInputDefaultProps","autoWidth","borderless","clearable","dragSort","defaultInputValue","minCollapsedNum","placeholder","size","defaultValue","TagInput","forwardRef","originalProps","ref","useDefaultProps","_useConfig","useConfig","prefix","classPrefix","_useGlobalIcon","useGlobalIcon","CloseCircleFilledIcon","XCircle","valueDisplay","label","inputProps","tips","status","suffixIcon","suffix","prefixIcon","maxRows","onClick","onPaste","onFocus","onBlur","_useControlled","useControlled","onInputChange","_useControlled2","tInputValue","setTInputValue","_useHover","_useDragSorter","useDragSorter","_objectSpread","sortOnDraggable","onDragOverCheck","x","targetClassNameRegExp","RegExp","concat","getDragProps","isCompositionRef","_useTagScroll","_useTagList","useTagList","tagValue","onClose","onInnerEnter","onInputBackspaceKeyUp","clearAll","renderLabel","onInputBackspaceKeyDown","NAME_CLASS","WITH_SUFFIX_ICON_CLASS","CLEAR_CLASS","BREAK_LINE_CLASS","tagInputPlaceholder","length","showClearIcon","Boolean","useImperativeHandle","onInputCompositionstart","value","_inputProps$onComposi","onCompositionstart","call","onInputCompositionend","_inputProps$onComposi2","onCompositionend","onInputEnter","trigger","onInnerClick","_tagInputRef$current$","inputElement","focus","onClearClick","_props$onClear","onClear","suffixIconNode","React","createElement","className","displayNode","index","isEmpty","Array","isArray","classes","_defineProperty","maxRowsStyle","TInput","onChange","val","classnames","style","showInput","keepWrapperWidth","onEnter","onKeydown","onKeyup","inputValue","displayName"],"mappings":"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"}
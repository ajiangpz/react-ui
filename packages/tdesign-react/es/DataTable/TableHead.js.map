{"version":3,"file":"TableHead.js","sources":["../../../components/DataTable/TableHead.tsx"],"sourcesContent":["import React, { useContext, useMemo, useCallback } from \"react\";\nimport { TableContextType } from \"./types\";\nimport { TableContext } from \"./context\";\nimport { Checkbox } from \"./Checkbox\";\nimport clsx from \"clsx\";\n\nexport const TableHead: React.FC = () => {\n  const {\n    columns,\n    rowSelection,\n    currentSortKey,\n    sortOrder,\n    setSort,\n    dataSource,\n    getRowKey,\n  } = useContext<TableContextType>(TableContext);\n\n  // 计算全选状态\n  const { checked: allChecked, indeterminate } = useMemo(() => {\n    if (!rowSelection || !dataSource.length) {\n      return { checked: false, indeterminate: false };\n    }\n\n    const { selectedRowKeys, getCheckboxProps } = rowSelection;\n    const availableKeys = dataSource\n      .filter(record => !getCheckboxProps?.(record)?.disabled)\n      .map(getRowKey);\n\n    if (!availableKeys.length) {\n      return { checked: false, indeterminate: false };\n    }\n\n    const selectedAvailableKeys = selectedRowKeys.filter(key =>\n      availableKeys.includes(key)\n    );\n\n    return {\n      checked: selectedAvailableKeys.length === availableKeys.length,\n      indeterminate:\n        selectedAvailableKeys.length > 0 &&\n        selectedAvailableKeys.length < availableKeys.length\n    };\n  }, [rowSelection, dataSource, getRowKey]);\n\n  // 处理全选\n  const handleSelectAll = useCallback(\n    (checked: boolean) => {\n      if (!rowSelection) return;\n\n      const { onChange, getCheckboxProps } = rowSelection;\n      if (!onChange) return;\n\n      const availableRecords = dataSource.filter(\n        record => !getCheckboxProps?.(record)?.disabled\n      );\n\n      const newSelectedKeys = checked ? availableRecords.map(getRowKey) : [];\n      onChange(newSelectedKeys as string[], availableRecords);\n    },\n    [rowSelection, dataSource, getRowKey]\n  );\n\n  const renderSelectionCell = useCallback(() => {\n    if (!rowSelection) return null;\n\n    return (\n      <th\n        key=\"selection\"\n        className={clsx(\n          \"border-b border-b-zinc-950/10 px-6 py-4 font-medium first:pl-6 last:pr-6 dark:border-b-white/10\",\n          \"bg-white dark:bg-zinc-900\",\n          \"w-14\"\n        )}\n      >\n        <div className=\"flex items-center justify-center h-5\">\n          <Checkbox\n            checked={allChecked}\n            indeterminate={indeterminate}\n            onChange={handleSelectAll}\n          />\n        </div>\n      </th>\n    );\n  }, [rowSelection, allChecked, indeterminate, handleSelectAll]);\n\n  return (\n    <thead className=\"text-zinc-500 dark:text-zinc-400\">\n      <tr>\n        {renderSelectionCell()}\n        {columns.map((column, index) => {\n          const baseClasses = clsx(\n            \"border-b border-b-zinc-950/10 px-6 py-4 font-medium first:pl-6 last:pr-6 dark:border-b-white/10\",\n            \"bg-white dark:bg-zinc-900\",\n            \"text-left\",\n            column.sorter && \"cursor-pointer hover:text-zinc-800 dark:hover:text-zinc-200\"\n          );\n\n          return (\n            <th\n              key={column.key || index}\n              onClick={() => column.sorter && setSort?.(column.key)}\n              className={baseClasses}\n            >\n              <div className=\"flex items-center gap-3 h-5\">\n                {column.title}\n                {column.sorter && currentSortKey === column.key && (\n                  <span className=\"text-primary-500 ml-auto\">\n                    {sortOrder === \"asc\" ? \"↑\" : \"↓\"}\n                  </span>\n                )}\n              </div>\n            </th>\n          );\n        })}\n      </tr>\n    </thead>\n  );\n};\n\nTableHead.displayName = \"TableHead\";\n"],"names":["TableHead","_useContext","useContext","TableContext","columns","rowSelection","currentSortKey","sortOrder","setSort","dataSource","getRowKey","_useMemo","useMemo","length","checked","indeterminate","selectedRowKeys","getCheckboxProps","availableKeys","filter","record","_getCheckboxProps","disabled","map","selectedAvailableKeys","key","includes","allChecked","handleSelectAll","useCallback","onChange","availableRecords","_getCheckboxProps2","newSelectedKeys","renderSelectionCell","React","createElement","className","clsx","Checkbox","column","index","baseClasses","sorter","onClick","title","displayName"],"mappings":"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"}
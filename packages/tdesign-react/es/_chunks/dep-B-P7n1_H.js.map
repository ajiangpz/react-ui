{"version":3,"file":"dep-B-P7n1_H.js","sources":["../../../components/Checkbox/defaultProps.ts","../../../components/Checkbox/CheckboxGroup.tsx","../../../components/Checkbox/Checkbox.tsx"],"sourcesContent":["\nimport { TdCheckboxProps, TdCheckboxGroupProps } from './type';\n\nexport const checkboxDefaultProps: TdCheckboxProps = {\n  checkAll: false,\n  defaultChecked: false,\n  disabled: undefined,\n  indeterminate: false,\n  readonly: false,\n};\n\nexport const checkboxGroupDefaultProps: TdCheckboxGroupProps = { max: undefined, defaultValue: [] };\n","import React, { ReactElement, useCallback, useEffect, useMemo, useState } from 'react';\nimport classNames from 'classnames';\nimport { isNumber } from 'lodash-es';\nimport useConfig from '../hooks/useConfig';\nimport { CheckContext, CheckContextValue, CheckProps } from '../common/Check';\nimport { CheckboxGroupValue, CheckboxOption, CheckboxOptionObj, TdCheckboxGroupProps, TdCheckboxProps } from './type';\nimport { StyledProps } from '../common';\nimport useControlled from '../hooks/useControlled';\nimport Checkbox from './Checkbox';\nimport { checkboxGroupDefaultProps } from './defaultProps';\nimport useDefaultProps from '../hooks/useDefaultProps';\n\nimport type { CheckboxProps } from './Checkbox';\n\nexport interface CheckboxGroupProps<T extends CheckboxGroupValue = CheckboxGroupValue>\n  extends TdCheckboxGroupProps<T>,\n  StyledProps {\n  children?: React.ReactNode;\n}\n\n// 将 checkBox 的 value 转换为 string|number\nconst getCheckboxValue = (v: CheckboxOption): string | number => {\n  switch (typeof v) {\n    case 'number':\n      return v as number;\n    case 'string':\n      return v as string;\n    case 'object': {\n      const vs = v as CheckboxOptionObj;\n      return vs.value;\n    }\n    default:\n      return undefined;\n  }\n};\n\n/**\n * 多选选项组，里面可以嵌套 <Checkbox />\n */\nconst CheckboxGroup = <T extends CheckboxGroupValue = CheckboxGroupValue>(props: CheckboxGroupProps<T>) => {\n  type ItemType = T[number];\n  const { classPrefix } = useConfig();\n  const {\n    onChange,\n    disabled,\n    className,\n    style,\n    children,\n    max,\n    options = [],\n  } = useDefaultProps<CheckboxGroupProps<T>>(props, checkboxGroupDefaultProps);\n\n  // 去掉所有 checkAll 之后的 options\n  const intervalOptions =\n    Array.isArray(options) && options.length > 0\n      ? options\n      : React.Children.map(\n        children,\n        (child: ReactElement<CheckboxProps>) =>\n          (child?.type as any)?.displayName === Checkbox.displayName && child.props,\n      ) || [];\n\n  const optionsWithoutCheckAll = intervalOptions.filter((t) => typeof t !== 'object' || !t.checkAll);\n  const optionsWithoutCheckAllValues = [];\n  optionsWithoutCheckAll.forEach((v: string | number) => {\n    const vs = getCheckboxValue(v);\n    optionsWithoutCheckAllValues.push(vs);\n  });\n\n  const [internalValue, setInternalValue] = useControlled(props, 'value', onChange);\n  const [localMax, setLocalMax] = useState(max);\n\n  const getCheckedSet = useCallback(() => {\n    if (!Array.isArray(internalValue)) {\n      return new Set<ItemType>([]);\n    }\n    return new Set<ItemType>([].concat(internalValue));\n  }, [internalValue]);\n  const checkedSet = useMemo(() => getCheckedSet(), [getCheckedSet]);\n\n  // 用于决定全选状态的属性\n  const indeterminate = useMemo(() => {\n    const list = Array.from(checkedSet);\n    return list.length !== 0 && list.length !== optionsWithoutCheckAll.length;\n  }, [checkedSet, optionsWithoutCheckAll]);\n\n  const checkAllChecked = useMemo(() => {\n    const list = Array.from(checkedSet);\n    return list.length === optionsWithoutCheckAll.length;\n  }, [checkedSet, optionsWithoutCheckAll]);\n\n  useEffect(() => {\n    if (!isNumber(max)) {\n      return;\n    }\n    if (max < checkedSet.size) {\n      console.warn('[TDesign] max should be less than the length of value, change is invalid');\n    } else {\n      setLocalMax(max);\n    }\n  }, [max, checkedSet]);\n\n  const context: CheckContextValue = {\n    inject: (\n      checkProps: CheckProps & {\n        // check 组件不关心 value 的类型，只关心是否存在，所以为了兼容 checkbox group 的类型\n        // 此处覆盖 checkbox 默认 value 的类型，使用 checkbox group 的 generic type 代替\n        value: ItemType;\n      },\n    ) => {\n      // 如果已经受控，则不注入\n      if (typeof checkProps.checked !== 'undefined') {\n        return checkProps;\n      }\n\n      const { value: checkValue } = checkProps;\n\n      return {\n        ...checkProps,\n        checked: checkProps.checkAll ? checkAllChecked : checkedSet.has(checkValue),\n        indeterminate: checkProps.checkAll ? indeterminate : checkProps.indeterminate,\n        disabled: checkProps.disabled || disabled || (checkedSet.size >= localMax && !checkedSet.has(checkValue)),\n        onChange(checked, { e }) {\n          if (typeof checkProps.onChange === 'function') {\n            checkProps.onChange(checked, { e });\n          }\n\n          const checkedSet = getCheckedSet();\n          // 全选时的逻辑处理\n          if (checkProps.checkAll) {\n            checkedSet.clear();\n            if (checked) {\n              optionsWithoutCheckAllValues.forEach((v) => {\n                checkedSet.add(v);\n              });\n            }\n          } else if (checked) {\n            if (checkedSet.size >= localMax && isNumber(max)) return;\n            checkedSet.add(checkValue);\n          } else {\n            checkedSet.delete(checkValue);\n          }\n\n          const currentOptionChecked = optionsWithoutCheckAll.find((item: CheckboxProps) => item.value === checkValue);\n\n          // 此处 `as` 是因为 `Array.from` 会导致 `checkSet` 的 generic type 丢失\n          setInternalValue(Array.from(checkedSet) as T, {\n            e,\n            current: checkProps.checkAll ? undefined : (checkValue as TdCheckboxProps),\n            type: checked ? 'check' : 'uncheck',\n            option: checkProps.checkAll ? undefined : currentOptionChecked,\n          });\n        },\n      };\n    },\n  };\n\n  // options 和 children 的抉择,在未明确说明时，暂时以 options 优先\n  const useOptions = Array.isArray(options) && options.length !== 0;\n\n  return (\n    <div className={classNames(`${classPrefix}-checkbox-group`, className)} style={style}>\n      <CheckContext.Provider value={context}>\n        {useOptions\n          ? options.map((v: any, index) => {\n            switch (typeof v) {\n              case 'string':\n                return (\n                  <Checkbox key={index} label={v} value={v}>\n                    {v}\n                  </Checkbox>\n                );\n              case 'number': {\n                return (\n                  <Checkbox key={index} label={v} value={v}>\n                    {String(v)}\n                  </Checkbox>\n                );\n              }\n              case 'object': {\n                const vs = v as CheckboxOptionObj;\n                // CheckAll 的 checkBox 不存在 value,故用 checkAll_index 来保证尽量不和用户的 value 冲突.\n                return vs.checkAll ? (\n                  <Checkbox {...vs} key={`checkAll_${index}`} indeterminate={indeterminate} />\n                ) : (\n                  <Checkbox {...vs} key={index} disabled={vs.disabled || disabled} />\n                );\n              }\n              default:\n                return null;\n            }\n          })\n          : children}\n      </CheckContext.Provider>\n    </div>\n  );\n};\n\nCheckboxGroup.displayName = 'CheckboxGroup';\n\nexport default CheckboxGroup;\n","import React from 'react';\nimport forwardRefWithStatics from \"../utils/forwardRefWithStatics\";\nimport Check, { CheckProps } from '../common/Check';\nimport CheckboxGroup from './CheckboxGroup';\nimport { checkboxDefaultProps } from './defaultProps';\nimport useDefaultProps from '../hooks/useDefaultProps';\n\nexport type CheckboxProps = Omit<CheckProps, 'type'>;\n\nconst Checkbox = forwardRefWithStatics(\n  (props: CheckboxProps, ref: React.Ref<HTMLLabelElement>) => (\n    <Check ref={ref} type=\"checkbox\" {...useDefaultProps<CheckboxProps>(props, checkboxDefaultProps)} />\n  ),\n  { Group: CheckboxGroup },\n);\n\nCheckbox.displayName = 'Checkbox';\n\nexport default Checkbox;\n"],"names":["checkboxDefaultProps","checkAll","defaultChecked","disabled","indeterminate","readonly","checkboxGroupDefaultProps","max","defaultValue","getCheckboxValue","v","_typeof","vs","value","CheckboxGroup","props","_useConfig","useConfig","classPrefix","_useDefaultProps","useDefaultProps","onChange","className","style","children","_useDefaultProps$opti","options","intervalOptions","Array","isArray","length","React","Children","map","child","_child$type","type","displayName","Checkbox","optionsWithoutCheckAll","filter","t","optionsWithoutCheckAllValues","forEach","push","_useControlled","useControlled","_useControlled2","_slicedToArray","internalValue","setInternalValue","_useState","useState","_useState2","localMax","setLocalMax","getCheckedSet","useCallback","Set","concat","checkedSet","useMemo","list","from","checkAllChecked","useEffect","isNumber","size","console","warn","context","inject","checkProps","checked","checkValue","_objectSpread","has","_ref","e","clear","add","currentOptionChecked","find","item","current","option","useOptions","createElement","classNames","CheckContext","Provider","index","key","label","String","forwardRefWithStatics","ref","Check","Group"],"mappings":"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"}
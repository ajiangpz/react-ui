{"version":3,"file":"dep-m5bu896E.js","sources":["../../../components/checkbox/defaultProps.ts","../../../components/checkbox/CheckboxGroup.tsx","../../../components/checkbox/Checkbox.tsx","../../../components/form/defaultProps.ts","../../../components/form/formModel.ts","../../../components/form/hooks/useFormItemInitialData.ts","../../../components/form/FormItem.tsx"],"sourcesContent":["\nimport { TdCheckboxProps, TdCheckboxGroupProps } from './type';\n\nexport const checkboxDefaultProps: TdCheckboxProps = {\n  checkAll: false,\n  defaultChecked: false,\n  disabled: undefined,\n  indeterminate: false,\n  readonly: false,\n};\n\nexport const checkboxGroupDefaultProps: TdCheckboxGroupProps = { max: undefined, defaultValue: [] };\n","import React, { ReactElement, useCallback, useEffect, useMemo, useState } from 'react';\nimport classNames from 'classnames';\nimport { isNumber } from 'lodash-es';\nimport useConfig from '../hooks/useConfig';\nimport { CheckContext, CheckContextValue, CheckProps } from '../common/Check';\nimport { CheckboxGroupValue, CheckboxOption, CheckboxOptionObj, TdCheckboxGroupProps, TdCheckboxProps } from './type';\nimport { StyledProps } from '../common';\nimport useControlled from '../hooks/useControlled';\nimport Checkbox from './Checkbox';\nimport { checkboxGroupDefaultProps } from './defaultProps';\nimport useDefaultProps from '../hooks/useDefaultProps';\n\nimport type { CheckboxProps } from './Checkbox';\n\nexport interface CheckboxGroupProps<T extends CheckboxGroupValue = CheckboxGroupValue>\n  extends TdCheckboxGroupProps<T>,\n  StyledProps {\n  children?: React.ReactNode;\n}\n\n// 将 checkBox 的 value 转换为 string|number\nconst getCheckboxValue = (v: CheckboxOption): string | number => {\n  switch (typeof v) {\n    case 'number':\n      return v as number;\n    case 'string':\n      return v as string;\n    case 'object': {\n      const vs = v as CheckboxOptionObj;\n      return vs.value;\n    }\n    default:\n      return undefined;\n  }\n};\n\n/**\n * 多选选项组，里面可以嵌套 <Checkbox />\n */\nconst CheckboxGroup = <T extends CheckboxGroupValue = CheckboxGroupValue>(props: CheckboxGroupProps<T>) => {\n  type ItemType = T[number];\n  const { classPrefix } = useConfig();\n  const {\n    onChange,\n    disabled,\n    className,\n    style,\n    children,\n    max,\n    options = [],\n  } = useDefaultProps<CheckboxGroupProps<T>>(props, checkboxGroupDefaultProps);\n\n  // 去掉所有 checkAll 之后的 options\n  const intervalOptions =\n    Array.isArray(options) && options.length > 0\n      ? options\n      : React.Children.map(\n        children,\n        (child: ReactElement<CheckboxProps>) =>\n          (child?.type as any)?.displayName === Checkbox.displayName && child.props,\n      ) || [];\n\n  const optionsWithoutCheckAll = intervalOptions.filter((t) => typeof t !== 'object' || !t.checkAll);\n  const optionsWithoutCheckAllValues = [];\n  optionsWithoutCheckAll.forEach((v: string | number) => {\n    const vs = getCheckboxValue(v);\n    optionsWithoutCheckAllValues.push(vs);\n  });\n\n  const [internalValue, setInternalValue] = useControlled(props, 'value', onChange);\n  const [localMax, setLocalMax] = useState(max);\n\n  const getCheckedSet = useCallback(() => {\n    if (!Array.isArray(internalValue)) {\n      return new Set<ItemType>([]);\n    }\n    return new Set<ItemType>([].concat(internalValue));\n  }, [internalValue]);\n  const checkedSet = useMemo(() => getCheckedSet(), [getCheckedSet]);\n\n  // 用于决定全选状态的属性\n  const indeterminate = useMemo(() => {\n    const list = Array.from(checkedSet);\n    return list.length !== 0 && list.length !== optionsWithoutCheckAll.length;\n  }, [checkedSet, optionsWithoutCheckAll]);\n\n  const checkAllChecked = useMemo(() => {\n    const list = Array.from(checkedSet);\n    return list.length === optionsWithoutCheckAll.length;\n  }, [checkedSet, optionsWithoutCheckAll]);\n\n  useEffect(() => {\n    if (!isNumber(max)) {\n      return;\n    }\n    if (max < checkedSet.size) {\n      console.warn('[TDesign] max should be less than the length of value, change is invalid');\n    } else {\n      setLocalMax(max);\n    }\n  }, [max, checkedSet]);\n\n  const context: CheckContextValue = {\n    inject: (\n      checkProps: CheckProps & {\n        // check 组件不关心 value 的类型，只关心是否存在，所以为了兼容 checkbox group 的类型\n        // 此处覆盖 checkbox 默认 value 的类型，使用 checkbox group 的 generic type 代替\n        value: ItemType;\n      },\n    ) => {\n      // 如果已经受控，则不注入\n      if (typeof checkProps.checked !== 'undefined') {\n        return checkProps;\n      }\n\n      const { value: checkValue } = checkProps;\n\n      return {\n        ...checkProps,\n        checked: checkProps.checkAll ? checkAllChecked : checkedSet.has(checkValue),\n        indeterminate: checkProps.checkAll ? indeterminate : checkProps.indeterminate,\n        disabled: checkProps.disabled || disabled || (checkedSet.size >= localMax && !checkedSet.has(checkValue)),\n        onChange(checked, { e }) {\n          if (typeof checkProps.onChange === 'function') {\n            checkProps.onChange(checked, { e });\n          }\n\n          const checkedSet = getCheckedSet();\n          // 全选时的逻辑处理\n          if (checkProps.checkAll) {\n            checkedSet.clear();\n            if (checked) {\n              optionsWithoutCheckAllValues.forEach((v) => {\n                checkedSet.add(v);\n              });\n            }\n          } else if (checked) {\n            if (checkedSet.size >= localMax && isNumber(max)) return;\n            checkedSet.add(checkValue);\n          } else {\n            checkedSet.delete(checkValue);\n          }\n\n          const currentOptionChecked = optionsWithoutCheckAll.find((item: CheckboxProps) => item.value === checkValue);\n\n          // 此处 `as` 是因为 `Array.from` 会导致 `checkSet` 的 generic type 丢失\n          setInternalValue(Array.from(checkedSet) as T, {\n            e,\n            current: checkProps.checkAll ? undefined : (checkValue as TdCheckboxProps),\n            type: checked ? 'check' : 'uncheck',\n            option: checkProps.checkAll ? undefined : currentOptionChecked,\n          });\n        },\n      };\n    },\n  };\n\n  // options 和 children 的抉择,在未明确说明时，暂时以 options 优先\n  const useOptions = Array.isArray(options) && options.length !== 0;\n\n  return (\n    <div className={classNames(`${classPrefix}-checkbox-group`, className)} style={style}>\n      <CheckContext.Provider value={context}>\n        {useOptions\n          ? options.map((v: any, index) => {\n            switch (typeof v) {\n              case 'string':\n                return (\n                  <Checkbox key={index} label={v} value={v}>\n                    {v}\n                  </Checkbox>\n                );\n              case 'number': {\n                return (\n                  <Checkbox key={index} label={v} value={v}>\n                    {String(v)}\n                  </Checkbox>\n                );\n              }\n              case 'object': {\n                const vs = v as CheckboxOptionObj;\n                // CheckAll 的 checkBox 不存在 value,故用 checkAll_index 来保证尽量不和用户的 value 冲突.\n                return vs.checkAll ? (\n                  <Checkbox {...vs} key={`checkAll_${index}`} indeterminate={indeterminate} />\n                ) : (\n                  <Checkbox {...vs} key={index} disabled={vs.disabled || disabled} />\n                );\n              }\n              default:\n                return null;\n            }\n          })\n          : children}\n      </CheckContext.Provider>\n    </div>\n  );\n};\n\nCheckboxGroup.displayName = 'CheckboxGroup';\n\nexport default CheckboxGroup;\n","import React from 'react';\nimport forwardRefWithStatics from \"../utils/forwardRefWithStatics\";\nimport Check, { CheckProps } from '../common/Check';\nimport CheckboxGroup from './CheckboxGroup';\nimport { checkboxDefaultProps } from './defaultProps';\nimport useDefaultProps from '../hooks/useDefaultProps';\n\nexport type CheckboxProps = Omit<CheckProps, 'type'>;\n\nconst Checkbox = forwardRefWithStatics(\n  (props: CheckboxProps, ref: React.Ref<HTMLLabelElement>) => (\n    <Check ref={ref} type=\"checkbox\" {...useDefaultProps<CheckboxProps>(props, checkboxDefaultProps)} />\n  ),\n  { Group: CheckboxGroup },\n);\n\nCheckbox.displayName = 'Checkbox';\n\nexport default Checkbox;\n","import { TdFormProps, TdFormItemProps } from './type';\n\nexport const formDefaultProps: TdFormProps = {\n  colon: false,\n  disabled: undefined,\n  id: undefined,\n  labelAlign: 'right',\n  labelWidth: '100px',\n  layout: 'vertical',\n  preventSubmitDefault: true,\n  requiredMark: undefined,\n  resetType: 'empty',\n  showErrorMessage: true,\n  statusIcon: undefined,\n  submitWithWarningMessage: false,\n  supportNumberKey: true,\n};\n\nexport const formItemDefaultProps: TdFormItemProps = {\n  label: '',\n  requiredMark: undefined,\n  shouldUpdate: false,\n  showErrorMessage: undefined,\n  statusIcon: undefined,\n  successBorder: false,\n};\n","// https://github.com/validatorjs/validator.js\n\nimport isDate from 'validator/lib/isDate';\nimport isEmail from 'validator/lib/isEmail';\nimport { isEmpty, isNumber } from 'lodash-es';\nimport isURL from 'validator/lib/isURL';\nimport { getCharacterLength } from '../utils/helper';\nimport {\n  CustomValidator,\n  FormRule,\n  ValueType,\n  AllValidateResult,\n  ValidateResultType,\n  CustomValidateResolveType,\n} from './type';\n\n// `{} / [] / '' / undefined / null` 等内容被认为是空； 0 和 false 被认为是正常数据，部分数据的值就是 0 或者 false\nexport function isValueEmpty(val: ValueType): boolean {\n  const type: string = Object.prototype.toString.call(val);\n  const typeMap: Record<string, any> = {\n    Date: '[object Date]',\n  };\n  if (type === typeMap.Date) {\n    return false;\n  }\n  return typeof val === 'object'\n    ? isEmpty(val)\n    : ['', undefined, null].includes(val);\n}\n\n// 比较值大小\nconst compareValue: (val: ValueType, num: number, isMax: boolean) => boolean = (\n  val,\n  num,\n  isMax,\n) => {\n  const compare: (a: number | any, b: number) => boolean = (a, b) =>\n    isMax ? a <= b : a >= b;\n  if (isNumber(val)) return compare(val, num);\n  if (Array.isArray(val)) return compare(val.length, num);\n  return compare(getCharacterLength(val), num);\n};\n\nconst VALIDATE_MAP = {\n  date: isDate,\n  url: isURL,\n  email: isEmail,\n  required: (val: ValueType): boolean => !isValueEmpty(val),\n  whitespace: (val: ValueType): boolean => !(/^\\s+$/.test(val) || val === ''),\n  boolean: (val: ValueType): boolean => typeof val === 'boolean',\n  max: (val: ValueType, num: number): boolean => compareValue(val, num, true),\n  min: (val: ValueType, num: number): boolean => compareValue(val, num, false),\n  len: (val: ValueType, num: number): boolean =>\n    getCharacterLength(val) === num,\n  number: (val: ValueType): boolean => isNumber(val),\n  enum: (val: ValueType, strs: Array<string>): boolean => strs.includes(val),\n  idcard: (val: ValueType): boolean =>\n    /^(\\d{18,18}|\\d{15,15}|\\d{17,17}x)$/i.test(val),\n  telnumber: (val: ValueType): boolean => /^1[3-9]\\d{9}$/.test(val),\n  pattern: (val: ValueType, regexp: RegExp): boolean => regexp.test(val),\n  // 自定义校验规则，可能是异步校验\n  validator: (\n    val: ValueType,\n    validate: CustomValidator,\n  ): ReturnType<CustomValidator> => validate(val),\n};\n\nexport type ValidateFuncType = (typeof VALIDATE_MAP)[keyof typeof VALIDATE_MAP];\n\n/**\n * 校验某一条数据的某一条规则，一种校验规则不满足则不再进行校验。\n * @param value 值\n * @param rule 校验规则\n * @returns 两种校验结果，一种是内置校验规则的校验结果哦，二种是自定义校验规则（validator）的校验结果\n */\nexport async function validateOneRule(\n  value: ValueType,\n  rule: FormRule,\n): Promise<AllValidateResult> {\n  let validateResult: CustomValidateResolveType | ValidateResultType = {\n    result: true,\n  };\n  const keys = Object.keys(rule);\n  let vOptions;\n  let vValidateFun: ValidateFuncType;\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    // 非必填选项，值为空，非自定义规则：无需校验，直接返回 true\n    if (!rule.required && isValueEmpty(value) && !rule.validator) {\n      return validateResult;\n    }\n    const validateRule: ValidateFuncType = VALIDATE_MAP[key];\n    // 找到一个校验规则，则无需再找，因为参数只允许对一个规则进行校验\n    if (validateRule && ![undefined, null].includes(rule[key])) {\n      // rule 值为 true 则表示没有校验参数，只是对值进行默认规则校验\n      vOptions = rule[key] === true ? undefined : rule[key];\n      vValidateFun = validateRule;\n      break;\n    }\n  }\n  if (vValidateFun) {\n    validateResult = await vValidateFun(value, vOptions);\n    // 如果校验不通过，则返回校验不通过的规则\n    if (typeof validateResult === 'boolean') {\n      return { ...rule, result: validateResult };\n    }\n    // 校验结果为 CustomValidateObj，只有自定义校验规则会存在这种情况\n    if (typeof validateResult === 'object') {\n      return validateResult;\n    }\n  }\n  return validateResult;\n}\n\n// 单个数据进行全规则校验，校验成功也可能会有 message\nexport async function validate(\n  value: ValueType,\n  rules: Array<FormRule>,\n): Promise<AllValidateResult[]> {\n  const all = rules.map((rule) => validateOneRule(value, rule));\n  const r = await Promise.all(all);\n  return r;\n}\n\n/**\n * Replace with template.\n * `${name} is wrong` + { name: 'password' } = password is wrong\n */\nexport function parseMessage(\n  template: string,\n  options: Record<string, string>,\n): string {\n  return template.replace(/\\$\\{\\w+\\}/g, (str: string) => {\n    const key = str.slice(2, -1);\n    return options[key];\n  });\n}\n","import React, { useEffect } from 'react';\nimport { get, unset, isEmpty } from 'lodash-es';\n\n// 兼容特殊数据结构和受控 key\n// import Tree from '../../tree/Tree';\n// import Upload from '../../upload/upload';\n// import CheckTag from '../../tag/CheckTag';\nimport Checkbox from '../../checkbox/Checkbox';\nimport TagInput from '../../tag-input/TagInput';\n// import RangeInput from '../../range-input/RangeInput';\n// import Transfer from '../../transfer/Transfer';\nimport CheckboxGroup from '../../checkbox/CheckboxGroup';\n// import DateRangePicker from '../../date-picker/DateRangePicker';\n// import TimeRangePicker from '../../time-picker/TimeRangePicker';\n\nimport { useFormContext, useFormListContext } from '../FormContext';\nimport { FormItemProps } from '../FormItem';\n\n// FormItem 子组件受控 key\nexport const ctrlKeyMap = new Map();\nctrlKeyMap.set(Checkbox, 'checked');\n// ctrlKeyMap.set(CheckTag, 'checked');\n// ctrlKeyMap.set(Upload, 'files');\n\n// FormItem 默认数据类型\nexport const initialDataMap = new Map();\n[\n  // Tree,\n  // Upload,\n  // Transfer,\n  TagInput,\n  // RangeInput,\n  CheckboxGroup,\n  // DateRangePicker,\n  // TimeRangePicker,\n].forEach((component) => {\n  initialDataMap.set(component, []);\n});\n[Checkbox].forEach((component) => {\n  initialDataMap.set(component, false);\n});\n\nexport default function useFormItemInitialData(name: FormItemProps['name']) {\n  let hadReadFloatingFormData = false;\n\n  const { floatingFormDataRef, initialData: formContextInitialData } =\n    useFormContext();\n\n  const { name: formListName, initialData: formListInitialData } =\n    useFormListContext();\n\n  // 组件渲染后删除对应游离值\n  useEffect(() => {\n    if (hadReadFloatingFormData) {\n      const nameList = formListName ? [formListName, name].flat() : name;\n      unset(floatingFormDataRef.current, nameList);\n    }\n  }, [hadReadFloatingFormData, floatingFormDataRef, formListName, name]);\n\n  // 整理初始值 优先级：Form.initialData < FormList.initialData < FormItem.initialData < floatFormData\n  function getDefaultInitialData({\n    children,\n    initialData,\n  }: {\n    children: FormItemProps['children'];\n    initialData: FormItemProps['initialData'];\n  }) {\n    if (\n      name &&\n      floatingFormDataRef?.current &&\n      !isEmpty(floatingFormDataRef.current)\n    ) {\n      const nameList = formListName ? [formListName, name].flat() : name;\n      const defaultInitialData = get(floatingFormDataRef.current, nameList);\n      if (typeof defaultInitialData !== 'undefined') {\n        hadReadFloatingFormData = true;\n        return defaultInitialData;\n      }\n    }\n\n    if (typeof initialData !== 'undefined') {\n      return initialData;\n    }\n\n    if (name && formListInitialData.length) {\n      const defaultInitialData = get(formListInitialData, name);\n      if (typeof defaultInitialData !== 'undefined') return defaultInitialData;\n    }\n\n    if (name && formContextInitialData) {\n      const defaultInitialData = get(formContextInitialData, name);\n      if (typeof defaultInitialData !== 'undefined') return defaultInitialData;\n    }\n\n    if (typeof children !== 'function') {\n      const childList = React.Children.toArray(children);\n      const lastChild = childList[childList.length - 1];\n      if (lastChild && React.isValidElement(lastChild)) {\n        // @ts-ignore\n        const isMultiple = lastChild?.props?.multiple;\n        return isMultiple ? [] : initialDataMap.get(lastChild.type);\n      }\n    }\n  }\n\n  return {\n    getDefaultInitialData,\n  };\n}\n","import React, { forwardRef, ReactNode, useEffect, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport {\n  CheckCircleFilledIcon as TdCheckCircleFilledIcon,\n  CloseCircleFilledIcon as TdCloseCircleFilledIcon,\n  ErrorCircleFilledIcon as TdErrorCircleFilledIcon,\n} from 'tdesign-icons-react';\nimport { flattenDeep, get, isEqual, isFunction, isObject, isString, merge, set, unset } from 'lodash-es';\nimport { StyledProps } from '../common';\nimport useConfig from '../hooks/useConfig';\nimport useDefaultProps from '../hooks/useDefaultProps';\nimport useGlobalIcon from '../hooks/useGlobalIcon';\n// import { useLocaleReceiver } from '../locale/LocalReceiver';\nimport { ValidateStatus } from './const';\nimport { formItemDefaultProps } from './defaultProps';\nimport { useFormContext, useFormListContext } from './FormContext';\nimport { parseMessage, validate as validateModal } from './formModel';\nimport { HOOK_MARK } from './hooks/useForm';\nimport useFormItemInitialData, { ctrlKeyMap } from './hooks/useFormItemInitialData';\nimport useFormItemStyle from './hooks/useFormItemStyle';\nimport type {\n  FormInstanceFunctions,\n  FormItemValidateMessage,\n  FormRule,\n  NamePath,\n  TdFormItemProps,\n  ValueType,\n} from './type';\nimport { calcFieldValue } from './utils';\n\nexport interface FormItemProps extends TdFormItemProps, StyledProps {\n  children?: React.ReactNode | React.ReactNode[] | ((form: FormInstanceFunctions) => React.ReactElement);\n}\n\nexport interface FormItemInstance {\n  name?: NamePath;\n  isUpdated?: boolean;\n  value?: any;\n  getValue?: Function;\n  setValue?: Function;\n  setField?: Function;\n  validate?: Function;\n  resetField?: Function;\n  setValidateMessage?: Function;\n  getValidateMessage?: Function;\n  resetValidate?: Function;\n  validateOnly?: Function;\n  isFormList?: boolean;\n}\n\nconst FormItem = forwardRef<FormItemInstance, FormItemProps>((originalProps, ref) => {\n  // const [locale, t] = useLocaleReceiver('form');\n  const { classPrefix, form: globalFormConfig } = useConfig();\n  const { CheckCircleFilledIcon, CloseCircleFilledIcon, ErrorCircleFilledIcon } = useGlobalIcon({\n    CheckCircleFilledIcon: TdCheckCircleFilledIcon,\n    CloseCircleFilledIcon: TdCloseCircleFilledIcon,\n    ErrorCircleFilledIcon: TdErrorCircleFilledIcon,\n  });\n  const {\n    form,\n    colon,\n    layout,\n    requiredMark: requiredMarkFromContext,\n    requiredMarkPosition,\n    labelAlign: labelAlignFromContext,\n    labelWidth: labelWidthFromContext,\n    showErrorMessage: showErrorMessageFromContext,\n    disabled: disabledFromContext,\n    resetType: resetTypeFromContext,\n    rules: rulesFromContext,\n    statusIcon: statusIconFromContext,\n    errorMessage,\n    formMapRef,\n    onFormItemValueChange,\n  } = useFormContext();\n\n  const { name: formListName, rules: formListRules, formListMapRef, form: formOfFormList } = useFormListContext();\n  const props = useDefaultProps<FormItemProps>(originalProps, formItemDefaultProps);\n\n  const {\n    children,\n    style,\n    label,\n    name,\n    status,\n    tips,\n    help,\n    valueFormat,\n    initialData,\n    className,\n    shouldUpdate,\n    successBorder,\n    statusIcon = statusIconFromContext,\n    rules: innerRules = getInnerRules(name, rulesFromContext, formListName, formListRules),\n    labelWidth = labelWidthFromContext,\n    labelAlign = labelAlignFromContext,\n    requiredMark = requiredMarkFromContext,\n  } = props;\n\n  const { getDefaultInitialData } = useFormItemInitialData(name);\n\n  const [, forceUpdate] = useState({}); // custom render state\n  const [freeShowErrorMessage, setFreeShowErrorMessage] = useState(undefined);\n  const [errorList, setErrorList] = useState([]);\n  const [successList, setSuccessList] = useState([]);\n  const [verifyStatus, setVerifyStatus] = useState('validating');\n  const [resetValidating, setResetValidating] = useState(false);\n  const [needResetField, setNeedResetField] = useState(false);\n  const [formValue, setFormValue] = useState(() => {\n    const fieldName = flattenDeep([formListName, name]);\n    const storeValue = get(form?.store, fieldName);\n    // if (!storeValue && formListName) return; // TODO 针对新增空的动态表单情况，避免回填默认值\n    return (\n      storeValue ??\n      getDefaultInitialData({\n        children,\n        initialData,\n      })\n    );\n  });\n\n  const formItemRef = useRef<FormItemInstance>(null); // 当前 formItem 实例\n  const innerFormItemsRef = useRef([]);\n  const shouldEmitChangeRef = useRef(false); // onChange 冒泡开关\n  const isUpdatedRef = useRef(false); // 校验开关\n  const shouldValidate = useRef(false); // 校验开关\n  const valueRef = useRef(formValue); // 当前最新值\n  const errorListMapRef = useRef(new Map());\n\n  const isSameForm = useMemo(() => isEqual(form, formOfFormList), [form, formOfFormList]); // 用于处理 Form 嵌套的情况\n  const snakeName = []\n    .concat(isSameForm ? formListName : undefined, name)\n    .filter((item) => item !== undefined)\n    .toString(); // 转化 name\n\n  const errorMessages = useMemo(() => errorMessage ?? globalFormConfig.errorMessage, [errorMessage, globalFormConfig]);\n\n  const showErrorMessage = useMemo(() => {\n    if (typeof freeShowErrorMessage === 'boolean') return freeShowErrorMessage;\n    if (typeof props.showErrorMessage === 'boolean') return props.showErrorMessage;\n    return showErrorMessageFromContext;\n  }, [freeShowErrorMessage, props.showErrorMessage, showErrorMessageFromContext]);\n\n  const { formItemClass, formItemLabelClass, contentClass, labelStyle, contentStyle, helpNode, extraNode } =\n    useFormItemStyle({\n      className,\n      help,\n      tips,\n      snakeName,\n      status,\n      successBorder,\n      errorList,\n      successList,\n      layout,\n      verifyStatus,\n      label,\n      labelWidth,\n      labelAlign,\n      requiredMark,\n      requiredMarkPosition,\n      showErrorMessage,\n      innerRules,\n    });\n\n  // 更新 form 表单字段\n  const updateFormValue = (newVal: any, validate = true, shouldEmitChange = false) => {\n    const { setPrevStore } = form?.getInternalHooks?.(HOOK_MARK) || {};\n    setPrevStore?.(form?.getFieldsValue?.(true));\n    shouldEmitChangeRef.current = shouldEmitChange;\n    isUpdatedRef.current = true;\n    shouldValidate.current = validate;\n    valueRef.current = newVal;\n\n    let fieldName = [].concat(name);\n    let fieldValue = formValue;\n    if (formListName) {\n      fieldName = [].concat(formListName, name);\n      fieldValue = get(form?.store, fieldName);\n    }\n\n    fieldName = fieldName.filter((item) => item !== undefined);\n\n    if (!fieldName) return;\n    if (isEqual(fieldValue, newVal)) return;\n    set(form?.store, fieldName, newVal);\n    setFormValue(newVal);\n  };\n\n  // 初始化 rules，最终以 formItem 上优先级最高\n  function getInnerRules(name, formRules, formListName, formListRules): FormRule[] {\n    if (Array.isArray(name)) {\n      return get(formRules?.[formListName], name) || get(formListRules, name) || get(formRules, name.join('.')) || [];\n    }\n    return formRules?.[name] || formListRules || [];\n  }\n\n  const renderSuffixIcon = () => {\n    if (statusIcon === false) return null;\n\n    const resultIcon = (iconSlot: ReactNode) => <span className={`${classPrefix}-form__status`}>{iconSlot}</span>;\n\n    const getDefaultIcon = () => {\n      const iconMap = {\n        success: <CheckCircleFilledIcon size=\"25px\" />,\n        error: <CloseCircleFilledIcon size=\"25px\" />,\n        warning: <ErrorCircleFilledIcon size=\"25px\" />,\n      };\n      if (verifyStatus === ValidateStatus.SUCCESS) {\n        return resultIcon(iconMap[verifyStatus]);\n      }\n      if (errorList && errorList[0]) {\n        const type = errorList[0].type || 'error';\n        return resultIcon(iconMap[type]);\n      }\n      return null;\n    };\n\n    if (React.isValidElement(statusIcon)) {\n      // @ts-ignore\n      return resultIcon(React.cloneElement(statusIcon, { style: { color: 'unset' }, ...statusIcon.props }));\n    }\n    if (statusIcon === true) {\n      return getDefaultIcon();\n    }\n\n    return null;\n  };\n\n  async function analysisValidateResult(trigger) {\n    const result = {\n      successList: [],\n      errorList: [],\n      rules: [],\n      resultList: [],\n      allowSetValue: false,\n    };\n    result.rules = trigger === 'all' ? innerRules : innerRules.filter((item) => (item.trigger || 'change') === trigger);\n    if (!result.rules?.length) {\n      setResetValidating(false);\n      return result;\n    }\n    result.allowSetValue = true;\n    result.resultList = await validateModal(formValue, result.rules);\n    result.errorList = result.resultList\n      .filter((item) => item.result !== true)\n      .map((item) => {\n        Object.keys(item).forEach((key) => {\n          if (!item.message && errorMessages[key]) {\n            // eslint-disable-next-line\n            item.message = parseMessage(errorMessages[key], {\n              validate: item[key],\n              name: isString(label) ? label : String(name),\n            });\n          }\n        });\n        return item;\n      });\n    // 仅有自定义校验方法才会存在 successList\n    result.successList = result.resultList.filter(\n      (item) => item.result === true && item.message && item.type === 'success',\n    );\n\n    return result;\n  }\n\n  async function validate(trigger = 'all', showErrorMessage?: boolean) {\n    if (innerFormItemsRef.current.length) {\n      return innerFormItemsRef.current.map((innerFormItem) => innerFormItem?.validate(trigger, showErrorMessage));\n    }\n\n    setResetValidating(true);\n    // undefined | boolean\n    setFreeShowErrorMessage(showErrorMessage);\n    const {\n      successList: innerSuccessList,\n      errorList: innerErrorList,\n      rules: validateRules,\n      resultList,\n      allowSetValue,\n    } = await analysisValidateResult(trigger);\n\n    // 缓存不同 trigger 下的错误信息 all 包含了所有场景需过滤\n    if (innerErrorList.length && trigger !== 'all') {\n      errorListMapRef.current.set(trigger, innerErrorList);\n    } else {\n      errorListMapRef.current.delete(trigger);\n    }\n\n    // all 校验无错误信息时清空所有错误缓存\n    if (!innerErrorList.length && trigger === 'all') {\n      errorListMapRef.current.clear();\n    }\n\n    const cacheErrorList = [...errorListMapRef.current.values()].flat();\n\n    if (allowSetValue) {\n      setSuccessList(innerSuccessList);\n      setErrorList(cacheErrorList.length ? cacheErrorList : innerErrorList);\n    }\n    // 根据校验结果设置校验状态\n    if (validateRules.length) {\n      let status = ValidateStatus.SUCCESS;\n      if (innerErrorList.length || cacheErrorList.length) {\n        status = innerErrorList?.[0]?.type || cacheErrorList?.[0]?.type || ValidateStatus.ERROR;\n      }\n      setVerifyStatus(status);\n    } else {\n      setVerifyStatus(ValidateStatus.VALIDATING);\n    }\n    // 重置处理\n    if (needResetField) {\n      resetHandler();\n    }\n    setResetValidating(false);\n    return {\n      [snakeName]: innerErrorList.length === 0 ? true : resultList,\n    };\n  }\n\n  async function validateOnly(trigger = 'all') {\n    const { errorList: innerErrorList, resultList } = await analysisValidateResult(trigger);\n\n    return {\n      [snakeName]: innerErrorList.length === 0 ? true : resultList,\n    };\n  }\n\n  // blur 下触发校验\n  function handleItemBlur() {\n    const filterRules = innerRules.filter((item) => item.trigger === 'blur');\n\n    filterRules.length && validate('blur');\n  }\n\n  function getResetValue(resetType: string): ValueType {\n    if (resetType === 'initial') {\n      return getDefaultInitialData({\n        children,\n        initialData,\n      });\n    }\n\n    let emptyValue: ValueType;\n    if (Array.isArray(formValue)) {\n      emptyValue = [];\n    } else if (isObject(formValue)) {\n      emptyValue = {};\n    } else if (isString(formValue)) {\n      emptyValue = '';\n    }\n\n    return emptyValue;\n  }\n\n  function resetField(type: string) {\n    if (typeof name === 'undefined') return;\n\n    const resetType = type || resetTypeFromContext;\n    const resetValue = getResetValue(resetType);\n    // reset 不校验\n    updateFormValue(resetValue, false);\n\n    if (resetValidating) {\n      setNeedResetField(true);\n    } else {\n      resetHandler();\n    }\n  }\n\n  function resetHandler() {\n    setNeedResetField(false);\n    setErrorList([]);\n    setSuccessList([]);\n    setVerifyStatus(ValidateStatus.VALIDATING);\n  }\n\n  function setField(field: { value?: string; status?: ValidateStatus; validateMessage?: FormItemValidateMessage }) {\n    const { value, status, validateMessage } = field;\n    if (typeof status !== 'undefined') {\n      setErrorList(validateMessage ? [validateMessage] : []);\n      setSuccessList(validateMessage ? [validateMessage] : []);\n      setNeedResetField(false);\n      setVerifyStatus(status);\n    }\n    if (typeof value !== 'undefined') {\n      // 手动设置 status 则不需要校验 交给用户判断\n      updateFormValue(value, typeof status === 'undefined' ? true : false, true);\n    }\n  }\n\n  function setValidateMessage(validateMessage: FormItemValidateMessage[]) {\n    if (!validateMessage || !Array.isArray(validateMessage)) return;\n    if (validateMessage.length === 0) {\n      setErrorList([]);\n      setVerifyStatus(ValidateStatus.SUCCESS);\n      return;\n    }\n    setErrorList(validateMessage);\n    const status = validateMessage?.[0]?.type || ValidateStatus.ERROR;\n    setVerifyStatus(status);\n  }\n\n  function getValidateMessage() {\n    return errorList;\n  }\n\n  useEffect(() => {\n    // 注册自定义更新回调\n    if (!shouldUpdate || !form) return;\n\n    const { getPrevStore, registerWatch } = form?.getInternalHooks?.(HOOK_MARK) || {};\n\n    const cancelRegister = registerWatch?.(() => {\n      const currStore = form?.getFieldsValue?.(true) || {};\n      let updateFlag = shouldUpdate as boolean;\n      if (isFunction(shouldUpdate)) updateFlag = shouldUpdate(getPrevStore?.(), currStore);\n\n      if (updateFlag) forceUpdate({});\n    });\n\n    return cancelRegister;\n  }, [shouldUpdate, form]);\n\n  useEffect(() => {\n    // 记录填写 name 属性 formItem\n    if (typeof name === 'undefined') return;\n\n    // formList 下特殊处理\n    if (formListName && isSameForm) {\n      formListMapRef.current.set(name, formItemRef);\n      return () => {\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        formListMapRef.current.delete(name);\n        unset(form?.store, name);\n      };\n    }\n    if (!formMapRef) return;\n    formMapRef.current.set(name, formItemRef);\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      formMapRef.current.delete(name);\n      unset(form?.store, name);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [snakeName, formListName]);\n\n  useEffect(() => {\n    // value 变化通知 watch 事件\n    form?.getInternalHooks?.(HOOK_MARK)?.notifyWatch?.(name);\n\n    // 控制是否需要校验\n    if (!shouldValidate.current) return;\n\n    // value change event\n    if (typeof name !== 'undefined' && shouldEmitChangeRef.current) {\n      if (formListName && isSameForm) {\n        // 整理 formItem 的值\n        const formListValue = merge([], calcFieldValue(name, formValue));\n        // 整理 formList 的值\n        const fieldValue = calcFieldValue(formListName, formListValue);\n        onFormItemValueChange?.({ ...fieldValue });\n      } else {\n        const fieldValue = calcFieldValue(name, formValue);\n        onFormItemValueChange?.({ ...fieldValue });\n      }\n    }\n\n    const filterRules = innerRules.filter((item) => (item.trigger || 'change') === 'change');\n\n    filterRules.length && validate('change');\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [formValue, snakeName]);\n\n  // 暴露 ref 实例方法\n  const instance: FormItemInstance = {\n    name,\n    value: formValue,\n    isUpdated: isUpdatedRef.current,\n    getValue: () => valueRef.current,\n    setValue: (newVal: any) => updateFormValue(newVal, true, true),\n    setField,\n    validate,\n    validateOnly,\n    resetField,\n    setValidateMessage,\n    getValidateMessage,\n    resetValidate: resetHandler,\n  };\n  useImperativeHandle(ref, (): FormItemInstance => instance);\n  useImperativeHandle(formItemRef, (): FormItemInstance => instance);\n\n  // 传入 form 实例支持自定义渲染\n  if (isFunction(children)) return children(form);\n\n  return (\n    <div className={formItemClass} style={style}>\n      {label && (\n        <div className={formItemLabelClass} style={labelStyle}>\n          <label htmlFor={props?.for}>{label}</label>\n          {colon || 'Colon'}\n        </div>\n      )}\n      <div className={contentClass()} style={contentStyle}>\n        <div className={`${classPrefix}-form__controls-content`}>\n          {React.Children.map(children, (child, index) => {\n            if (!child) return null;\n\n            let ctrlKey = 'value';\n            if (React.isValidElement(child)) {\n              if (child.type === FormItem) {\n                return React.cloneElement(child, {\n                  // @ts-ignore\n                  ref: (el) => {\n                    if (!el) return;\n                    innerFormItemsRef.current[index] = el;\n                  },\n                });\n              }\n              if (typeof child.type === 'object') {\n                ctrlKey = ctrlKeyMap.get(child.type) || 'value';\n              }\n              const childProps = child.props as any;\n              return React.cloneElement(child, {\n                disabled: disabledFromContext,\n                ...childProps,\n                [ctrlKey]: formValue,\n                onChange: (value: any, ...args: any[]) => {\n                  const newValue = valueFormat ? valueFormat(value) : value;\n                  updateFormValue(newValue, true, true);\n                  childProps?.onChange?.call?.(null, value, ...args);\n                },\n                onBlur: (value: any, ...args: any[]) => {\n                  handleItemBlur();\n                  childProps?.onBlur?.call?.(null, value, ...args);\n                },\n              });\n            }\n            return child;\n          })}\n          {renderSuffixIcon()}\n        </div>\n        {helpNode}\n        {extraNode}\n      </div>\n    </div>\n  );\n});\n\nFormItem.displayName = 'FormItem';\n\nexport default FormItem;\n"],"names":["checkboxDefaultProps","checkAll","defaultChecked","disabled","indeterminate","readonly","checkboxGroupDefaultProps","max","defaultValue","getCheckboxValue","v","_typeof","vs","value","CheckboxGroup","props","_useConfig","useConfig","classPrefix","_useDefaultProps","useDefaultProps","onChange","className","style","children","_useDefaultProps$opti","options","intervalOptions","Array","isArray","length","React","Children","map","child","_child$type","type","displayName","Checkbox","optionsWithoutCheckAll","filter","t","optionsWithoutCheckAllValues","forEach","push","_useControlled","useControlled","_useControlled2","_slicedToArray","internalValue","setInternalValue","_useState","useState","_useState2","localMax","setLocalMax","getCheckedSet","useCallback","Set","concat","checkedSet","useMemo","list","from","checkAllChecked","useEffect","isNumber","size","console","warn","context","inject","checkProps","checked","checkValue","_objectSpread","has","_ref","e","clear","add","currentOptionChecked","find","item","current","option","useOptions","createElement","classNames","CheckContext","Provider","index","key","label","String","forwardRefWithStatics","ref","Check","Group","formDefaultProps","colon","id","labelAlign","labelWidth","layout","preventSubmitDefault","requiredMark","resetType","showErrorMessage","statusIcon","submitWithWarningMessage","supportNumberKey","formItemDefaultProps","shouldUpdate","successBorder","isValueEmpty","val","Object","prototype","toString","call","typeMap","Date","isEmpty","includes","compareValue","num","isMax","compare","a","b","getCharacterLength","VALIDATE_MAP","date","isDate","url","isURL","email","isEmail","required","whitespace","test","boolean","min","len","number","enum","strs","idcard","telnumber","pattern","regexp","validator","validate","validateOneRule","_x","_x2","_validateOneRule","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","rule","validateResult","keys","vOptions","vValidateFun","i","validateRule","wrap","_context","prev","next","result","abrupt","sent","stop","_x3","_x4","_validate","_callee2","rules","all","r","_context2","Promise","parseMessage","template","replace","str","slice","ctrlKeyMap","Map","set","initialDataMap","TagInput","component","useFormItemInitialData","name","hadReadFloatingFormData","_useFormContext","useFormContext","floatingFormDataRef","formContextInitialData","initialData","_useFormListContext","useFormListContext","formListName","formListInitialData","nameList","flat","unset","getDefaultInitialData","defaultInitialData","get","childList","toArray","lastChild","isValidElement","_lastChild$props","isMultiple","multiple","FormItem","forwardRef","originalProps","globalFormConfig","form","_useGlobalIcon","useGlobalIcon","CheckCircleFilledIcon","TdCheckCircleFilledIcon","CloseCircleFilledIcon","TdCloseCircleFilledIcon","ErrorCircleFilledIcon","TdErrorCircleFilledIcon","requiredMarkFromContext","requiredMarkPosition","labelAlignFromContext","labelWidthFromContext","showErrorMessageFromContext","disabledFromContext","resetTypeFromContext","rulesFromContext","statusIconFromContext","errorMessage","formMapRef","onFormItemValueChange","formListRules","formListMapRef","formOfFormList","status","tips","help","valueFormat","_props$statusIcon","_props$rules","innerRules","getInnerRules","_props$labelWidth","_props$labelAlign","_props$requiredMark","_useFormItemInitialDa","forceUpdate","_useState3","_useState4","freeShowErrorMessage","setFreeShowErrorMessage","_useState5","_useState6","errorList","setErrorList","_useState7","_useState8","successList","setSuccessList","_useState9","_useState0","verifyStatus","setVerifyStatus","_useState1","_useState10","resetValidating","setResetValidating","_useState11","_useState12","needResetField","setNeedResetField","_useState13","fieldName","flattenDeep","storeValue","store","_useState14","formValue","setFormValue","formItemRef","useRef","innerFormItemsRef","shouldEmitChangeRef","isUpdatedRef","shouldValidate","valueRef","errorListMapRef","isSameForm","isEqual","snakeName","errorMessages","_useFormItemStyle","useFormItemStyle","formItemClass","formItemLabelClass","contentClass","labelStyle","contentStyle","helpNode","extraNode","updateFormValue","newVal","_form$getInternalHook","_form$getFieldsValue","shouldEmitChange","getInternalHooks","HOOK_MARK","setPrevStore","getFieldsValue","fieldValue","formRules","join","renderSuffixIcon","resultIcon","iconSlot","getDefaultIcon","iconMap","success","error","warning","ValidateStatus","SUCCESS","cloneElement","color","analysisValidateResult","trigger","_result$rules","resultList","allowSetValue","validateModal","message","isString","_analysisValidateResult","showErrorMessage2","_yield$analysisValida","innerSuccessList","innerErrorList","validateRules","cacheErrorList","status2","_innerErrorList$","_cacheErrorList$","_args2","undefined","innerFormItem","_toConsumableArray","values","ERROR","VALIDATING","resetHandler","_defineProperty","validateOnly","_validateOnly","_callee3","_yield$analysisValida2","_args3","_context3","handleItemBlur","filterRules","getResetValue","emptyValue","isObject","resetField","resetValue","setField","field","validateMessage","setValidateMessage","_validateMessage$","getValidateMessage","_form$getInternalHook2","_ref2","getPrevStore","registerWatch","cancelRegister","_form$getFieldsValue2","currStore","updateFlag","isFunction","_form$getInternalHook3","_form$getInternalHook4","notifyWatch","formListValue","merge","calcFieldValue","instance","isUpdated","getValue","setValue","resetValidate","useImperativeHandle","htmlFor","ctrlKey","el","childProps","_childProps$onChange","_childProps$onChange$","newValue","_len","args","_key","onBlur","_childProps$onBlur","_childProps$onBlur$ca","_len2","_key2"],"mappings":"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"}
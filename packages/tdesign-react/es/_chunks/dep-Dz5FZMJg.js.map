{"version":3,"file":"dep-Dz5FZMJg.js","sources":["../../../components/hooks/useVirtualScroll.ts"],"sourcesContent":["/**\n * 通用虚拟滚动，可支持 Select/List/Table/TreeSelect/Cascader 等组件\n */\nimport { MutableRefObject, useEffect, useMemo, useRef, useState } from 'react';\nimport { isEqual } from 'lodash-es';\nimport type { ScrollToElementParams, TScroll } from '../components/common';\n\nexport type UseVirtualScrollParams = {\n  /** 列数据 */\n  data: { [key: string]: any }[];\n  scroll: TScroll & {\n    fixedRows?: Array<number>;\n  };\n};\n\nconst requestAnimationFrame =\n  (typeof window === 'undefined' ? false : window.requestAnimationFrame) ||\n  ((cb) => setTimeout(cb, 16.6));\n\nconst useVirtualScroll = (\n  container: MutableRefObject<HTMLElement>,\n  params: UseVirtualScrollParams,\n) => {\n  const { data, scroll } = params;\n  const dataRef = useRef(data);\n\n  /** 注意测试：数据长度为空；数据长度小于表格高度等情况。即期望只有数据量达到一定程度才允许开启虚拟滚动 */\n  const [visibleData, setVisibleData] = useState<any[]>([]);\n  // 滚动过程中表格顶部占位距离\n  const [translateY, setTranslateY] = useState(\n    () => (data?.length || 0) * (scroll?.rowHeight || 50),\n  );\n  // 滚动高度，用于显示滚动条\n  const [scrollHeight, setScrollHeight] = useState(0);\n  const trScrollTopHeightList = useRef<number[]>([]);\n  // 已经通过节点渲染计算出来的各自行高\n  const [trHeightList, setTrHeightList] = useState<number[]>([]);\n  const containerHeight = useRef(0);\n  const [startAndEndIndex, setStartAndEndIndex] = useState<[number, number]>(\n    () => [0, (scroll?.bufferSize || 10) * 3],\n  );\n\n  // 设置初始值\n  const tScroll = useMemo(() => {\n    if (!scroll) return {};\n    return {\n      bufferSize: scroll.bufferSize || 10,\n      isFixedRowHeight: scroll.isFixedRowHeight ?? false,\n      rowHeight: scroll.rowHeight || 47,\n      threshold: scroll.threshold || 100,\n      type: scroll.type,\n      fixedRows: scroll.fixedRows ?? [0, 0],\n    };\n  }, [scroll]);\n\n  // 当前场景是否满足开启虚拟滚动的条件\n  const isVirtualScroll = useMemo(\n    () => tScroll.type === 'virtual' && tScroll.threshold < data.length,\n    [tScroll, data],\n  );\n  const getTrScrollTopHeightList = (trHeightList: number[]) => {\n    const list: number[] = [];\n    // 大数据场景不建议使用 forEach 一类函数迭代\n    // 当前行滚动高度 = 上一行滚动高度 + 当前行高度\n    for (let i = 0, len = data.length; i < len; i++) {\n      list[i] = (list[i - 1] || 0) + (trHeightList[i] || tScroll.rowHeight);\n    }\n    return list;\n  };\n\n  const updateVisibleData = (\n    trScrollTopHeightList: number[],\n    scrollTop: number,\n  ) => {\n    let currentIndex = -1;\n    // 获取当前滚动到哪一个元素（大数据场景不建议使用 forEach 一类函数迭代）\n    for (let i = 0, len = trScrollTopHeightList.length; i < len; i++) {\n      if (trScrollTopHeightList[i] >= scrollTop) {\n        currentIndex = i;\n        break;\n      }\n    }\n    let lastIndex = trScrollTopHeightList.length;\n    const containerCurrentHeight =\n      containerHeight.current ||\n      container.current.getBoundingClientRect().height;\n    const scrollBottom = scrollTop + containerCurrentHeight;\n    // 获取当前视窗的最后一个元素（大数据场景不建议使用 forEach 一类函数迭代）\n    for (\n      let i = currentIndex, len = trScrollTopHeightList.length;\n      i < len;\n      i++\n    ) {\n      if (trScrollTopHeightList[i] >= scrollBottom) {\n        lastIndex = i;\n        break;\n      }\n    }\n    if (currentIndex < 0) return;\n    const startIndex = Math.max(currentIndex - tScroll.bufferSize, 0);\n    const endIndex = Math.min(\n      lastIndex + tScroll.bufferSize,\n      trScrollTopHeightList.length,\n    );\n\n    // 计算固定行情况\n    const { fixedRows } = tScroll;\n    const [fixedStart, fixedEnd] = fixedRows;\n    let fixedStartData = fixedStart ? data.slice(0, fixedStart) : [];\n    if (fixedStart && startIndex < fixedStart) {\n      fixedStartData = fixedStartData.slice(0, startIndex);\n    }\n    let fixedEndData = fixedEnd ? data.slice(data.length - fixedEnd) : [];\n    const bottomStartIndex = endIndex - data.length + 1 + (fixedEnd ?? 0);\n    if (fixedEnd && bottomStartIndex > 0) {\n      fixedEndData = fixedEndData.slice(bottomStartIndex);\n    }\n\n    if (\n      startAndEndIndex.join() !== [startIndex, endIndex].join() &&\n      startIndex >= 0\n    ) {\n      const tmpVisibleData = fixedStartData\n        .concat(data.slice(startIndex, endIndex))\n        .concat(fixedEndData);\n      setVisibleData(tmpVisibleData);\n      const lastScrollTop = trScrollTopHeightList[startIndex - 1];\n      const top = lastScrollTop > 0 ? lastScrollTop : 0;\n      const stickyHeight =\n        trScrollTopHeightList[Math.min(startIndex, fixedStart) - 1] || 0;\n      setTranslateY(top - stickyHeight);\n      setStartAndEndIndex([startIndex, endIndex]);\n    }\n  };\n\n  // 仅非固定高度场景需要\n  const handleRowMounted = (rowData: any) => {\n    if (\n      !isVirtualScroll ||\n      !rowData ||\n      tScroll.isFixedRowHeight ||\n      !container?.current\n    )\n      return;\n    const trHeight = rowData.ref.offsetHeight;\n    // eslint-disable-next-line\n    const rowIndex = rowData.data.__VIRTUAL_SCROLL_INDEX;\n    const newTrHeightList = trHeightList;\n    if (newTrHeightList[rowIndex] !== trHeight) {\n      newTrHeightList[rowIndex] = trHeight;\n      setTrHeightList(newTrHeightList);\n\n      const scrollTopHeightList = getTrScrollTopHeightList(newTrHeightList);\n      trScrollTopHeightList.current = scrollTopHeightList;\n\n      const lastIndex = scrollTopHeightList.length - 1;\n      setScrollHeight(scrollTopHeightList[lastIndex] - containerHeight.current);\n      updateVisibleData(scrollTopHeightList, container.current.scrollTop);\n    }\n  };\n\n  const handleScroll = () => {\n    if (!isVirtualScroll) return;\n    updateVisibleData(\n      trScrollTopHeightList.current,\n      container.current.scrollTop,\n    );\n  };\n\n  const addIndexToData = (data: any[]) => {\n    data.forEach((item, index) => {\n      Reflect.set(item, '__VIRTUAL_SCROLL_INDEX', index);\n    });\n  };\n\n  const updateScrollTop = ({\n    index,\n    top = 0,\n    behavior,\n  }: ScrollToElementParams) => {\n    const scrollTop = trScrollTopHeightList.current[index] - top;\n    container.current?.scrollTo({\n      top: scrollTop,\n      behavior: behavior || 'auto',\n    });\n  };\n\n  /**\n   * 滚动到指定元素（对外暴露的方法，谨慎修改）\n   */\n  const scrollToElement = (p: ScrollToElementParams) => {\n    updateScrollTop(p);\n    if (!tScroll.isFixedRowHeight) {\n      requestAnimationFrame(() => {\n        const duration = p.time ?? 60;\n        const timer = setTimeout(() => {\n          updateScrollTop(p);\n          clearTimeout(timer);\n        }, duration);\n      });\n    }\n  };\n\n  // 固定高度场景，可直接通过数据长度计算出最大滚动高度\n  useEffect(\n    () => {\n      if (!isVirtualScroll) {\n        trScrollTopHeightList.current = getTrScrollTopHeightList(trHeightList);\n        return;\n      }\n\n      // 给数据添加下标\n      addIndexToData(data);\n\n      const scrollTopHeightList = trScrollTopHeightList.current;\n      const dataChanged = !isEqual(dataRef.current, data);\n\n      if (scrollTopHeightList?.length === data?.length && !dataChanged) {\n        // 正常滚动时更新可见数据\n        const lastIndex = scrollTopHeightList.length - 1;\n        setScrollHeight(scrollTopHeightList[lastIndex]);\n\n        updateVisibleData(scrollTopHeightList, container.current.scrollTop);\n      } else {\n        /**\n        /* 进入这个分支的场景可能有：\n         * - 初始化\n         * - 从非虚拟滚动切换到虚拟滚动\n         * - 外部数据动态更新（长度变化、内容结构变化等）\n         */\n        dataRef.current = data;\n        setScrollHeight(data.length * tScroll.rowHeight);\n\n        // 如果之前存在滚动，基于原先数据计算位置\n        const currentScrollTop = container.current?.scrollTop || 0;\n        let currentIndex = Math.floor(currentScrollTop / tScroll.rowHeight);\n        const prevScrollTopHeightList = trScrollTopHeightList.current;\n        for (let i = 0; i < prevScrollTopHeightList?.length; i++) {\n          if (prevScrollTopHeightList[i] >= currentScrollTop) {\n            currentIndex = i;\n            break;\n          }\n        }\n\n        const startIndex = Math.max(currentIndex - tScroll.bufferSize, 0);\n        const visibleCount = Math.min(tScroll.bufferSize * 3, data.length);\n        const endIndex = Math.min(startIndex + visibleCount, data.length);\n        const tmpData = data.slice(startIndex, endIndex);\n\n        let translateY = startIndex * tScroll.rowHeight;\n\n        if (prevScrollTopHeightList?.length > 0 && startIndex > 0) {\n          const prevHeight =\n            prevScrollTopHeightList[\n              Math.min(startIndex - 1, prevScrollTopHeightList.length - 1)\n            ] || 0;\n          translateY = Math.max(0, prevHeight);\n        }\n\n        setVisibleData(tmpData);\n        setTranslateY(translateY);\n      }\n\n      const timer = setTimeout(() => {\n        if (container.current) {\n          const tmpContainerHeight =\n            container.current.getBoundingClientRect().height;\n          containerHeight.current = tmpContainerHeight;\n          const scrollTopHeightList = getTrScrollTopHeightList(trHeightList);\n          trScrollTopHeightList.current = scrollTopHeightList;\n          clearTimeout(timer);\n        }\n      }, 1);\n    },\n    // eslint-disable-next-line\n    [container, data, tScroll, isVirtualScroll, startAndEndIndex, trHeightList],\n  );\n\n  return {\n    visibleData,\n    translateY,\n    scrollHeight,\n    isVirtualScroll,\n    handleScroll,\n    handleRowMounted,\n    scrollToElement,\n  };\n};\n\nexport type VirtualScrollConfig = ReturnType<typeof useVirtualScroll>;\n\nexport default useVirtualScroll;\n"],"names":["requestAnimationFrame","window","cb","setTimeout","useVirtualScroll","container","params","data","scroll","dataRef","useRef","_useState","useState","_useState2","_slicedToArray","visibleData","setVisibleData","_useState3","length","rowHeight","_useState4","translateY","setTranslateY","_useState5","_useState6","scrollHeight","setScrollHeight","trScrollTopHeightList","_useState7","_useState8","trHeightList","setTrHeightList","containerHeight","_useState9","bufferSize","_useState0","startAndEndIndex","setStartAndEndIndex","tScroll","useMemo","_scroll$isFixedRowHei","_scroll$fixedRows","isFixedRowHeight","threshold","type","fixedRows","isVirtualScroll","getTrScrollTopHeightList","list","i","len","updateVisibleData","scrollTop","currentIndex","lastIndex","containerCurrentHeight","current","getBoundingClientRect","height","scrollBottom","startIndex","Math","max","endIndex","min","_fixedRows","fixedStart","fixedEnd","fixedStartData","slice","fixedEndData","bottomStartIndex","join","tmpVisibleData","concat","lastScrollTop","top","stickyHeight","handleRowMounted","rowData","trHeight","ref","offsetHeight","rowIndex","__VIRTUAL_SCROLL_INDEX","newTrHeightList","scrollTopHeightList","handleScroll","addIndexToData","forEach","item","index","Reflect","set","updateScrollTop","_container$current","_ref","_ref$top","behavior","scrollTo","scrollToElement","p","_p$time","duration","time","timer","clearTimeout","useEffect","dataChanged","isEqual","_container$current2","currentScrollTop","floor","prevScrollTopHeightList","visibleCount","tmpData","prevHeight","tmpContainerHeight"],"mappings":"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"}
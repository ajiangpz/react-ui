{"version":3,"file":"Badge.js","sources":["../../../components/Badge/defaultProps.ts","../../../components/Badge/Badge.tsx"],"sourcesContent":["\nimport { TdBadgeProps } from './type';\n\nexport const badgeDefaultProps: TdBadgeProps = {\n  count: 0,\n  dot: false,\n  maxCount: 99,\n  shape: 'circle',\n  showZero: false,\n  size: 'medium',\n};\n","import React, { forwardRef } from 'react';\nimport classNames from 'classnames';\nimport { StyledProps } from '../common';\nimport useConfig from '../hooks/useConfig';\nimport { TdBadgeProps } from './type';\nimport { badgeDefaultProps } from './defaultProps';\nimport useDefaultProps from '../hooks/useDefaultProps';\n\nexport interface BadgeProps extends TdBadgeProps, StyledProps { }\n\nconst Badge = forwardRef<HTMLSpanElement, BadgeProps>((props, ref) => {\n  const {\n    color,\n    dot,\n    maxCount,\n    count,\n    size,\n    shape,\n    showZero,\n    offset,\n    className,\n    content,\n    children,\n    style,\n    ...restProps\n  } = useDefaultProps<BadgeProps>(props, badgeDefaultProps);\n  const { classPrefix } = useConfig();\n\n  const childNode = content || children;\n\n  const badgeClassName = classNames(\n    !childNode && `${classPrefix}-badge--static`,\n    dot ? `${classPrefix}-badge--dot` : `${classPrefix}-badge--${shape}`,\n    size === 'small' && `${classPrefix}-size-s`,\n    !childNode && className,\n  );\n  const getDisplayCount = () => {\n    if (typeof count === 'number' && count > maxCount) {\n      return `${maxCount}+`;\n    }\n    return count;\n  };\n\n  let isHidden = !count;\n  if (typeof count === 'number') {\n    isHidden = count < 1 && !showZero;\n  }\n\n  const getStyle = () => {\n    const mergedStyle: React.CSSProperties = { ...style };\n    if (color) {\n      mergedStyle.backgroundColor = color;\n    }\n    if (offset) {\n      if (offset[0]) {\n        mergedStyle.right = +offset[0];\n      }\n      if (offset[1]) {\n        mergedStyle.marginTop = +offset[1];\n      }\n    }\n    return mergedStyle;\n  };\n\n  const badge = !isHidden ? (\n    <span {...(childNode ? {} : restProps)} className={badgeClassName} style={getStyle()}>\n      {!dot ? getDisplayCount() : null}\n    </span>\n  ) : null;\n\n  if (!childNode) {\n    return badge;\n  }\n\n  return (\n    <span {...restProps} className={classNames(`${classPrefix}-badge`, className)} ref={ref}>\n      {childNode}\n      {badge}\n    </span>\n  );\n});\n\nBadge.displayName = 'Badge';\n\nexport default Badge;\n"],"names":["badgeDefaultProps","count","dot","maxCount","shape","showZero","size","Badge","forwardRef","props","ref","_useDefaultProps","useDefaultProps","color","offset","className","content","children","style","restProps","_objectWithoutProperties","_excluded","_useConfig","useConfig","classPrefix","childNode","badgeClassName","classNames","concat","getDisplayCount","isHidden","getStyle","mergedStyle","_objectSpread","backgroundColor","right","marginTop","badge","React","createElement","displayName"],"mappings":"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"}
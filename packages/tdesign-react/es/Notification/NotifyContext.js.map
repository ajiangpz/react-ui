{"version":3,"file":"NotifyContext.js","sources":["../../../components/Notification/NotifyContext.tsx"],"sourcesContent":["import React, {\n  createContext,\n  useState,\n  useRef,\n  useCallback,\n  useContext,\n} from 'react';\nimport { createPortal } from 'react-dom';\nimport NotifyContainer from './NotifyContainer';\n\n// 1. 定义类型\ntype NotificationType = 'success' | 'error' | 'warning' | 'info';\n\ninterface Notification {\n  id: string;\n  type: NotificationType;\n  message: string;\n  createdAt: number;\n  isRemoved: boolean;\n  title:string\n}\n\n// 2. 定义 Context 类型\ninterface NotificationContextType {\n  notify: (type: NotificationType, message: string) => void;\n  success: (message: Message) => void;\n  error: (message: Message) => void;\n  warning: (message: Message) => void;\n  info: (message: Message) => void;\n  removeNotification: (id: string) => void;\n}\n\n// 3. 创建 Context\nconst NotificationContext = createContext<NotificationContextType | null>(null);\n\n// 4. 生成唯一 ID 的辅助函数\nconst generateId = () => Math.random().toString(36).substr(2, 9);\n\n// 5. Provider 组件\ninterface NotificationProviderProps {\n  children: React.ReactNode;\n  maxStack?: number;\n  displayDuration?: number;\n  position?: string;\n}\n\n type Message = {\n    title:string,\n    message:string\n  }\nexport const NotificationProvider: React.FC<NotificationProviderProps> = ({\n  children,\n  maxStack = 5,\n  displayDuration = 3000,\n  position = 'top-right',\n}) => {\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const timersRef = useRef<Map<string, NodeJS.Timeout>>(new Map());\n  const pausedAtRef = useRef<Map<string, number>>(new Map());\n\n  // 定时器相关函数\n  const clearNotificationTimer = useCallback((id: string) => {\n    const timer = timersRef.current.get(id);\n    if (timer) {\n      clearTimeout(timer);\n      timersRef.current.delete(id);\n    }\n  }, []);\n\n  const startTimer = useCallback(\n    (notification: Notification, remainingTime?: number) => {\n      const duration = remainingTime ?? displayDuration;\n      const timer = setTimeout(() => {\n        setNotifications((prev) =>\n          prev.map((n) =>\n            n.id === notification.id ? { ...n, isRemoved: true } : n,\n          ),\n        );\n        setTimeout(() => {\n          setNotifications((prev) =>\n            prev.filter((t) => t.id !== notification.id),\n          );\n          clearNotificationTimer(notification.id);\n          pausedAtRef.current.delete(notification.id);\n        }, 400);\n      }, duration);\n      timersRef.current.set(notification.id, timer);\n    },\n    [displayDuration],\n  );\n\n \n\n  // 6. 核心通知函数\n  const addNotification = useCallback(\n    (type: NotificationType, message: Message) => {\n      const newNotification: Notification = {\n        id: generateId(),\n        type,\n        title:message.title,\n        message:message.message,\n        createdAt: Date.now(),\n        isRemoved: false,\n      };\n\n      setNotifications((prev) => {\n        const newNotifications = [newNotification, ...prev];\n        const removedNotifications = newNotifications.slice(maxStack);\n\n        removedNotifications.forEach((notification) => {\n          clearNotificationTimer(notification.id);\n          pausedAtRef.current.delete(notification.id);\n        });\n\n        return newNotifications.slice(0, maxStack);\n      });\n\n      startTimer(newNotification);\n    },\n    [maxStack, startTimer, clearNotificationTimer],\n  );\n\n  // 7. 提供的 Context 值\n  const contextValue = React.useMemo(\n    () => ({\n      notify: addNotification,\n      success: (message:Message) => addNotification('success', message),\n      error: (message: Message) => addNotification('error', message),\n      warning: (message: Message) => addNotification('warning', message),\n      info: (message: Message) => addNotification('info', message),\n      removeNotification: (id: string) => {\n        setNotifications((prev) => prev.filter((t) => t.id !== id));\n        clearNotificationTimer(id);\n        pausedAtRef.current.delete(id);\n      },\n    }),\n    [addNotification, clearNotificationTimer],\n  );\n\n  // 悬停处理\n  const clearAllTimers = useCallback(() => {\n    const now = Date.now();\n    notifications.forEach((notification) => {\n      pausedAtRef.current.set(notification.id, now);\n      clearNotificationTimer(notification.id);\n    });\n  }, [notifications]);\n\n  const restartAllTimers = useCallback(() => {\n    notifications.forEach((notification) => {\n      const pausedAt = pausedAtRef.current.get(notification.id);\n      if (pausedAt) {\n        const elapsedTime = pausedAt - notification.createdAt;\n        const remainingTime = Math.max(0, displayDuration - elapsedTime);\n        startTimer(notification, remainingTime);\n        pausedAtRef.current.delete(notification.id);\n      }\n    });\n  }, [notifications, displayDuration, startTimer]);\n\n  return (\n    <NotificationContext.Provider value={contextValue}>\n      {children}\n      {createPortal(\n        <NotifyContainer\n          notifications={notifications}\n          onRemove={(id) => contextValue.removeNotification(id)}\n          onHoverStart={clearAllTimers}\n          onHoverEnd={restartAllTimers}\n          data-testid=\"notification-container\"\n          maxStack={maxStack}\n          position={position}\n        />,\n        document.body,\n      )}\n    </NotificationContext.Provider>\n  );\n};\n\n// 8. 创建自定义 Hook\nexport const useNotification = () => {\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error(\n      'useNotification must be used within a NotificationProvider',\n    );\n  }\n  return context;\n};\n"],"names":["NotificationContext","createContext","generateId","Math","random","toString","substr","NotificationProvider","children","_ref","_ref$maxStack","maxStack","_ref$displayDuration","displayDuration","_ref$position","position","_useState","useState","_useState2","_slicedToArray","notifications","setNotifications","timersRef","useRef","Map","pausedAtRef","clearNotificationTimer","useCallback","id","timer","current","get","clearTimeout","startTimer","notification","remainingTime","duration","setTimeout","prev","map","n","_objectSpread","isRemoved","filter","t","set","addNotification","type","message","newNotification","title","createdAt","Date","now","newNotifications","concat","_toConsumableArray","removedNotifications","slice","forEach","contextValue","React","useMemo","notify","success","error","warning","info","removeNotification","clearAllTimers","restartAllTimers","pausedAt","elapsedTime","max","Provider","value","createPortal","createElement","NotifyContainer","onRemove","onHoverStart","onHoverEnd","document","body","useNotification","context","useContext","Error"],"mappings":"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"}
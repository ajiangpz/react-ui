{"version":3,"file":"dep-BKTdNIRm.js","sources":["../../../components/checkbox/defaultProps.ts","../../../components/checkbox/CheckboxGroup.tsx","../../../components/checkbox/Checkbox.tsx"],"sourcesContent":["\r\nimport { TdCheckboxProps, TdCheckboxGroupProps } from './type';\r\n\r\nexport const checkboxDefaultProps: TdCheckboxProps = {\r\n  checkAll: false,\r\n  defaultChecked: false,\r\n  disabled: undefined,\r\n  indeterminate: false,\r\n  readonly: false,\r\n};\r\n\r\nexport const checkboxGroupDefaultProps: TdCheckboxGroupProps = { max: undefined, defaultValue: [] };\r\n","import React, { ReactElement, useCallback, useEffect, useMemo, useState } from 'react';\r\nimport classNames from 'classnames';\r\nimport { isNumber } from 'lodash-es';\r\nimport useConfig from '../hooks/useConfig';\r\nimport { CheckContext, CheckContextValue, CheckProps } from '../common/Check';\r\nimport { CheckboxGroupValue, CheckboxOption, CheckboxOptionObj, TdCheckboxGroupProps, TdCheckboxProps } from './type';\r\nimport { StyledProps } from '../common';\r\nimport useControlled from '../hooks/useControlled';\r\nimport Checkbox from './Checkbox';\r\nimport { checkboxGroupDefaultProps } from './defaultProps';\r\nimport useDefaultProps from '../hooks/useDefaultProps';\r\n\r\nimport type { CheckboxProps } from './Checkbox';\r\n\r\nexport interface CheckboxGroupProps<T extends CheckboxGroupValue = CheckboxGroupValue>\r\n  extends TdCheckboxGroupProps<T>,\r\n  StyledProps {\r\n  children?: React.ReactNode;\r\n}\r\n\r\n// 将 checkBox 的 value 转换为 string|number\r\nconst getCheckboxValue = (v: CheckboxOption): string | number => {\r\n  switch (typeof v) {\r\n    case 'number':\r\n      return v as number;\r\n    case 'string':\r\n      return v as string;\r\n    case 'object': {\r\n      const vs = v as CheckboxOptionObj;\r\n      return vs.value;\r\n    }\r\n    default:\r\n      return undefined;\r\n  }\r\n};\r\n\r\n/**\r\n * 多选选项组，里面可以嵌套 <Checkbox />\r\n */\r\nconst CheckboxGroup = <T extends CheckboxGroupValue = CheckboxGroupValue>(props: CheckboxGroupProps<T>) => {\r\n  type ItemType = T[number];\r\n  const { classPrefix } = useConfig();\r\n  const {\r\n    onChange,\r\n    disabled,\r\n    className,\r\n    style,\r\n    children,\r\n    max,\r\n    options = [],\r\n  } = useDefaultProps<CheckboxGroupProps<T>>(props, checkboxGroupDefaultProps);\r\n\r\n  // 去掉所有 checkAll 之后的 options\r\n  const intervalOptions =\r\n    Array.isArray(options) && options.length > 0\r\n      ? options\r\n      : React.Children.map(\r\n        children,\r\n        (child: ReactElement<CheckboxProps>) =>\r\n          (child?.type as any)?.displayName === Checkbox.displayName && child.props,\r\n      ) || [];\r\n\r\n  const optionsWithoutCheckAll = intervalOptions.filter((t) => typeof t !== 'object' || !t.checkAll);\r\n  const optionsWithoutCheckAllValues = [];\r\n  optionsWithoutCheckAll.forEach((v: string | number) => {\r\n    const vs = getCheckboxValue(v);\r\n    optionsWithoutCheckAllValues.push(vs);\r\n  });\r\n\r\n  const [internalValue, setInternalValue] = useControlled(props, 'value', onChange);\r\n  const [localMax, setLocalMax] = useState(max);\r\n\r\n  const getCheckedSet = useCallback(() => {\r\n    if (!Array.isArray(internalValue)) {\r\n      return new Set<ItemType>([]);\r\n    }\r\n    return new Set<ItemType>([].concat(internalValue));\r\n  }, [internalValue]);\r\n  const checkedSet = useMemo(() => getCheckedSet(), [getCheckedSet]);\r\n\r\n  // 用于决定全选状态的属性\r\n  const indeterminate = useMemo(() => {\r\n    const list = Array.from(checkedSet);\r\n    return list.length !== 0 && list.length !== optionsWithoutCheckAll.length;\r\n  }, [checkedSet, optionsWithoutCheckAll]);\r\n\r\n  const checkAllChecked = useMemo(() => {\r\n    const list = Array.from(checkedSet);\r\n    return list.length === optionsWithoutCheckAll.length;\r\n  }, [checkedSet, optionsWithoutCheckAll]);\r\n\r\n  useEffect(() => {\r\n    if (!isNumber(max)) {\r\n      return;\r\n    }\r\n    if (max < checkedSet.size) {\r\n      console.warn('[TDesign] max should be less than the length of value, change is invalid');\r\n    } else {\r\n      setLocalMax(max);\r\n    }\r\n  }, [max, checkedSet]);\r\n\r\n  const context: CheckContextValue = {\r\n    inject: (\r\n      checkProps: CheckProps & {\r\n        // check 组件不关心 value 的类型，只关心是否存在，所以为了兼容 checkbox group 的类型\r\n        // 此处覆盖 checkbox 默认 value 的类型，使用 checkbox group 的 generic type 代替\r\n        value: ItemType;\r\n      },\r\n    ) => {\r\n      // 如果已经受控，则不注入\r\n      if (typeof checkProps.checked !== 'undefined') {\r\n        return checkProps;\r\n      }\r\n\r\n      const { value: checkValue } = checkProps;\r\n\r\n      return {\r\n        ...checkProps,\r\n        checked: checkProps.checkAll ? checkAllChecked : checkedSet.has(checkValue),\r\n        indeterminate: checkProps.checkAll ? indeterminate : checkProps.indeterminate,\r\n        disabled: checkProps.disabled || disabled || (checkedSet.size >= localMax && !checkedSet.has(checkValue)),\r\n        onChange(checked, { e }) {\r\n          if (typeof checkProps.onChange === 'function') {\r\n            checkProps.onChange(checked, { e });\r\n          }\r\n\r\n          const checkedSet = getCheckedSet();\r\n          // 全选时的逻辑处理\r\n          if (checkProps.checkAll) {\r\n            checkedSet.clear();\r\n            if (checked) {\r\n              optionsWithoutCheckAllValues.forEach((v) => {\r\n                checkedSet.add(v);\r\n              });\r\n            }\r\n          } else if (checked) {\r\n            if (checkedSet.size >= localMax && isNumber(max)) return;\r\n            checkedSet.add(checkValue);\r\n          } else {\r\n            checkedSet.delete(checkValue);\r\n          }\r\n\r\n          const currentOptionChecked = optionsWithoutCheckAll.find((item: CheckboxProps) => item.value === checkValue);\r\n\r\n          // 此处 `as` 是因为 `Array.from` 会导致 `checkSet` 的 generic type 丢失\r\n          setInternalValue(Array.from(checkedSet) as T, {\r\n            e,\r\n            current: checkProps.checkAll ? undefined : (checkValue as TdCheckboxProps),\r\n            type: checked ? 'check' : 'uncheck',\r\n            option: checkProps.checkAll ? undefined : currentOptionChecked,\r\n          });\r\n        },\r\n      };\r\n    },\r\n  };\r\n\r\n  // options 和 children 的抉择,在未明确说明时，暂时以 options 优先\r\n  const useOptions = Array.isArray(options) && options.length !== 0;\r\n\r\n  return (\r\n    <div className={classNames(`${classPrefix}-checkbox-group`, className)} style={style}>\r\n      <CheckContext.Provider value={context}>\r\n        {useOptions\r\n          ? options.map((v: any, index) => {\r\n            switch (typeof v) {\r\n              case 'string':\r\n                return (\r\n                  <Checkbox key={index} label={v} value={v}>\r\n                    {v}\r\n                  </Checkbox>\r\n                );\r\n              case 'number': {\r\n                return (\r\n                  <Checkbox key={index} label={v} value={v}>\r\n                    {String(v)}\r\n                  </Checkbox>\r\n                );\r\n              }\r\n              case 'object': {\r\n                const vs = v as CheckboxOptionObj;\r\n                // CheckAll 的 checkBox 不存在 value,故用 checkAll_index 来保证尽量不和用户的 value 冲突.\r\n                return vs.checkAll ? (\r\n                  <Checkbox {...vs} key={`checkAll_${index}`} indeterminate={indeterminate} />\r\n                ) : (\r\n                  <Checkbox {...vs} key={index} disabled={vs.disabled || disabled} />\r\n                );\r\n              }\r\n              default:\r\n                return null;\r\n            }\r\n          })\r\n          : children}\r\n      </CheckContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n\r\nCheckboxGroup.displayName = 'CheckboxGroup';\r\n\r\nexport default CheckboxGroup;\r\n","import React from 'react';\r\nimport forwardRefWithStatics from \"../utils/forwardRefWithStatics\";\r\nimport Check, { CheckProps } from '../common/Check';\r\nimport CheckboxGroup from './CheckboxGroup';\r\nimport { checkboxDefaultProps } from './defaultProps';\r\nimport useDefaultProps from '../hooks/useDefaultProps';\r\n\r\nexport type CheckboxProps = Omit<CheckProps, 'type'>;\r\n\r\nconst Checkbox = forwardRefWithStatics(\r\n  (props: CheckboxProps, ref: React.Ref<HTMLLabelElement>) => (\r\n    <Check ref={ref} type=\"checkbox\" {...useDefaultProps<CheckboxProps>(props, checkboxDefaultProps)} />\r\n  ),\r\n  { Group: CheckboxGroup },\r\n);\r\n\r\nCheckbox.displayName = 'Checkbox';\r\n\r\nexport default Checkbox;\r\n"],"names":["checkboxDefaultProps","checkAll","defaultChecked","disabled","undefined","indeterminate","readonly","checkboxGroupDefaultProps","max","defaultValue","getCheckboxValue","v","_typeof","vs","value","CheckboxGroup","props","_useConfig","useConfig","classPrefix","_useDefaultProps","useDefaultProps","onChange","className","style","children","_useDefaultProps$opti","options","intervalOptions","Array","isArray","length","React","Children","map","child","_child$type","type","displayName","Checkbox","optionsWithoutCheckAll","filter","t","optionsWithoutCheckAllValues","forEach","push","_useControlled","useControlled","_useControlled2","_slicedToArray","internalValue","setInternalValue","_useState","useState","_useState2","localMax","setLocalMax","getCheckedSet","useCallback","Set","concat","checkedSet","useMemo","list","from","checkAllChecked","useEffect","isNumber","size","console","warn","context","inject","checkProps","checked","checkValue","_objectSpread","has","_ref","e","clear","add","currentOptionChecked","find","item","current","option","useOptions","createElement","classNames","CheckContext","Provider","index","key","label","String","_extends","forwardRefWithStatics","ref","Check","Group"],"mappings":"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"}
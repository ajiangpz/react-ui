{"version":3,"file":"ConfigProvider.js","sources":["../../../components/config-provider/ConfigProvider.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { mergeWith as _mergeWith, cloneDeep } from 'lodash-es';\r\nimport ConfigContext, { defaultGlobalConfig, Config } from './ConfigContext';\r\nimport { GlobalConfigProvider } from './type';\r\n\r\nexport interface ConfigProviderProps extends Config {\r\n  children: React.ReactNode;\r\n  /**\r\n   * 不需要设置全局上下文信息 \r\n   * 不传或者false：表示全局上下文变动，需要更新全局上下文的信息放入到变量中\r\n   * true：表示全局上下文信息不需要重新设置，\r\n   * 解决问题：当plugin调用的时候，单独包裹的Provider 也会传全局变量，仅自身可用，多次调用时相互之间不会冲突。\r\n   * 插件单独的config方法依然可用。自身属性通过props传递\r\n   * 例如：多处调用message.config 如果每次都更新全局上下文，插件调用时配置会相互影响，导致行为结果跟预期不一致。\r\n   */\r\n  notSet?: boolean;\r\n}\r\n\r\nexport const merge = (src: GlobalConfigProvider, config: GlobalConfigProvider) =>\r\n  _mergeWith(src, config, (objValue, srcValue) => {\r\n    if (Array.isArray(objValue)) {\r\n      return srcValue;\r\n    }\r\n  });\r\n\r\n// 存放全局的上下文配置\r\nlet globalConfig = defaultGlobalConfig;\r\n\r\nexport const getGlobalConfig = (configInfo?: GlobalConfigProvider): GlobalConfigProvider => merge({ ...globalConfig }, configInfo)\r\n\r\nexport const setGlobalConfig = (configInfo?: GlobalConfigProvider) => {\r\n  globalConfig = configInfo\r\n}\r\n\r\n\r\nexport default function ConfigProvider({ children, globalConfig, notSet }: ConfigProviderProps) {\r\n  const defaultData = cloneDeep(defaultGlobalConfig);\r\n  const mergedGlobalConfig = merge(defaultData, globalConfig);\r\n\r\n  useEffect(() => {\r\n    if (!notSet) {\r\n      // 需要设置的情况下，当配置信息变化时更新变量中的配置信息，方便plugin调用时获取\r\n      setGlobalConfig(mergedGlobalConfig)\r\n    }\r\n  }, [mergedGlobalConfig, notSet]);\r\n\r\n  return <ConfigContext.Provider value={{ globalConfig: mergedGlobalConfig }}>{children}</ConfigContext.Provider>;\r\n}\r\n\r\nConfigProvider.getGlobalConfig = getGlobalConfig;\r\nConfigProvider.setGlobalConfig = setGlobalConfig;\r\n\r\nConfigProvider.displayName = 'ConfigProvider';\r\n"],"names":["merge","src","config","_mergeWith","objValue","srcValue","Array","isArray","globalConfig","defaultGlobalConfig","getGlobalConfig","configInfo","_objectSpread","setGlobalConfig","ConfigProvider","_ref","children","notSet","defaultData","cloneDeep","mergedGlobalConfig","useEffect","React","createElement","ConfigContext","Provider","value","displayName"],"mappings":";;;;;;;;AAkBO,IAAMA,KAAK,GAAG,SAARA,KAAKA,CAAIC,GAAyB,EAAEC,MAA4B,EAAA;EAAA,OAC3EC,SAAU,CAACF,GAAG,EAAEC,MAAM,EAAE,UAACE,QAAQ,EAAEC,QAAQ,EAAK;AAC9C,IAAA,IAAIC,KAAK,CAACC,OAAO,CAACH,QAAQ,CAAC,EAAE;AAC3B,MAAA,OAAOC,QAAQ;AACjB,IAAA;AACF,EAAA,CAAC,CAAC;AAAA;;AAEJ;AACA,IAAIG,YAAY,GAAGC,mBAAmB;IAEzBC,eAAe,GAAG,SAAlBA,eAAeA,CAAIC,UAAiC,EAAA;AAAA,EAAA,OAA2BX,KAAK,CAAAY,aAAA,KAAMJ,YAAY,CAAA,EAAIG,UAAU,CAAC;AAAA;IAErHE,eAAe,GAAG,SAAlBA,eAAeA,CAAIF,UAAiC,EAAK;AACpEH,EAAAA,YAAY,GAAGG,UAAU;AAC3B;AAGe,SAASG,cAAcA,CAAAC,IAAA,EAA0D;AAAA,EAAA,IAAvDC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;IAAER,YAAY,GAAAO,IAAA,CAAZP,YAAY;IAAES,MAAM,GAAAF,IAAA,CAANE,MAAM;AACrE,EAAA,IAAMC,WAAW,GAAGC,SAAS,CAACV,mBAAmB,CAAC;AAClD,EAAA,IAAMW,kBAAkB,GAAGpB,KAAK,CAACkB,WAAW,EAAEV,YAAY,CAAC;AAE3Da,EAAAA,SAAS,CAAC,YAAM;IACd,IAAI,CAACJ,MAAM,EAAE;AACX;MACAJ,eAAe,CAACO,kBAAkB,CAAC;AACrC,IAAA;AACF,EAAA,CAAC,EAAE,CAACA,kBAAkB,EAAEH,MAAM,CAAC,CAAC;AAEhC,EAAA,oBAAOK,KAAA,CAAAC,aAAA,CAACC,aAAa,CAACC,QAAQ,EAAA;AAACC,IAAAA,KAAK,EAAE;AAAElB,MAAAA,YAAY,EAAEY;AAAmB;AAAE,GAAA,EAAEJ,QAAiC,CAAC;AACjH;AAEAF,cAAc,CAACJ,eAAe,GAAGA,eAAe;AAChDI,cAAc,CAACD,eAAe,GAAGA,eAAe;AAEhDC,cAAc,CAACa,WAAW,GAAG,gBAAgB;;;;"}
{"version":3,"file":"useInstance.js","sources":["../../../../components/form/hooks/useInstance.tsx"],"sourcesContent":["import { isEmpty, isFunction, isEqual, merge, get, set } from 'lodash-es';\r\n// import log from '@tdesign/common-js/log/index';\r\nimport type {\r\n  TdFormProps,\r\n  FormValidateResult,\r\n  FormResetParams,\r\n  FormValidateMessage,\r\n  AllValidateResult,\r\n  NamePath,\r\n} from '../type';\r\nimport useConfig from '../../hooks/useConfig';\r\nimport { getMapValue, objectToArray, travelMapFromObject, calcFieldValue } from '../utils';\r\n\r\n// 检测是否需要校验 默认全量校验\r\nfunction needValidate(name: NamePath, fields: string[]) {\r\n  if (!fields || !Array.isArray(fields)) return true;\r\n  return fields.some((item) => String(item) === String(name));\r\n}\r\n\r\n// 整理校验结果\r\nfunction formatValidateResult(validateResultList) {\r\n  const result = validateResultList.reduce((r, err) => Object.assign(r || {}, err), {});\r\n  Object.keys(result).forEach((key) => {\r\n    if (result[key] === true) {\r\n      delete result[key];\r\n    } else {\r\n      result[key] = result[key].filter((fr: AllValidateResult) => fr.result === false);\r\n    }\r\n\r\n    // 整理嵌套数据\r\n    if (result[key] && key.includes(',')) {\r\n      const keyList = key.split(',');\r\n      const fieldValue = calcFieldValue(keyList, result[key]);\r\n      merge(result, fieldValue);\r\n      delete result[key];\r\n    }\r\n  });\r\n  return isEmpty(result) ? true : result;\r\n}\r\n\r\nexport default function useInstance(\r\n  props: TdFormProps,\r\n  formRef,\r\n  formMapRef: React.MutableRefObject<Map<any, any>>,\r\n  floatingFormDataRef: React.RefObject<Record<any, any>>,\r\n) {\r\n  const { classPrefix } = useConfig();\r\n\r\n  const { scrollToFirstError, preventSubmitDefault = true, onSubmit, onReset } = props;\r\n\r\n  // 获取第一个错误表单\r\n  function getFirstError(r: FormValidateResult<FormData>) {\r\n    if (r === true) return;\r\n    const [firstKey] = Object.keys(r);\r\n    if (scrollToFirstError) {\r\n      scrollTo(`.${classPrefix}-form--has-error`);\r\n    }\r\n    return r[firstKey][0]?.message;\r\n  }\r\n\r\n  // 校验不通过时，滚动到第一个错误表单\r\n  function scrollTo(selector: string) {\r\n    const dom = formRef.current.querySelector?.(selector);\r\n    const behavior = scrollToFirstError as ScrollBehavior;\r\n    dom && dom.scrollIntoView({ behavior });\r\n  }\r\n\r\n  // 对外方法 手动提交表单\r\n  function submit(e?: React.FormEvent<HTMLFormElement>) {\r\n    if (preventSubmitDefault) {\r\n      e?.preventDefault?.();\r\n      e?.stopPropagation?.();\r\n    }\r\n    validate().then((r) => {\r\n      const firstError = getFirstError(r);\r\n      const fields = getFieldsValue(true);\r\n      onSubmit?.({ validateResult: r, firstError, e, fields });\r\n    });\r\n  }\r\n\r\n  // 对外方法，该方法会触发全部表单组件错误信息显示\r\n  async function validate(param?: Record<string, any>): Promise<FormValidateResult<FormData>> {\r\n    const { fields, trigger = 'all', showErrorMessage } = param || {};\r\n    const list = [...formMapRef.current.values()]\r\n      .filter(\r\n        (formItemRef) => isFunction(formItemRef?.current?.validate) && needValidate(formItemRef?.current?.name, fields),\r\n      )\r\n      .map((formItemRef) => formItemRef?.current.validate(trigger, showErrorMessage));\r\n\r\n    const validateList = await Promise.all(list);\r\n    return formatValidateResult(validateList);\r\n  }\r\n\r\n  // 对外方法，该方法只会校验不会触发信息提示\r\n  async function validateOnly(param?: Record<string, any>): Promise<FormValidateResult<FormData>> {\r\n    const { fields, trigger = 'all' } = param || {};\r\n    const list = [...formMapRef.current.values()]\r\n      .filter(\r\n        (formItemRef) =>\r\n          isFunction(formItemRef?.current?.validateOnly) && needValidate(formItemRef?.current?.name, fields),\r\n      )\r\n      .map((formItemRef) => formItemRef?.current.validateOnly?.(trigger));\r\n\r\n    const validateList = await Promise.all(list);\r\n    return formatValidateResult(validateList);\r\n  }\r\n\r\n  // 对外方法，获取对应 formItem 的值\r\n  function getFieldValue(name: NamePath) {\r\n    if (!name) return null;\r\n\r\n    const formItemRef = getMapValue(name, formMapRef);\r\n    return formItemRef?.current?.getValue?.();\r\n  }\r\n\r\n  // 对外方法，获取一组字段名对应的值，当调用 getFieldsValue(true) 时返回所有值\r\n  function getFieldsValue(nameList: string[] | boolean) {\r\n    const fieldsValue = {};\r\n\r\n    if (nameList === true) {\r\n      // 嵌套数组子节点先添加导致外层数据覆盖因而需要倒序遍历\r\n      for (const [name, formItemRef] of [...formMapRef.current.entries()].reverse()) {\r\n        let fieldValue = null;\r\n        if (formItemRef?.current.isFormList) {\r\n          fieldValue = calcFieldValue(name, formItemRef?.current.getValue?.());\r\n        } else {\r\n          fieldValue = calcFieldValue(name, formItemRef?.current.getValue?.(), !props.supportNumberKey);\r\n        }\r\n        merge(fieldsValue, fieldValue);\r\n      }\r\n    } else {\r\n      if (!Array.isArray(nameList)) {\r\n        console.error('Form', '`getFieldsValue` 参数需要 Array 类型');\r\n        return {};\r\n      }\r\n\r\n      nameList.forEach((name) => {\r\n        const formItemRef = getMapValue(name, formMapRef);\r\n        if (!formItemRef) return;\r\n\r\n        const fieldValue = calcFieldValue(name, formItemRef?.current.getValue?.());\r\n        merge(fieldsValue, fieldValue);\r\n      });\r\n    }\r\n    return fieldsValue;\r\n  }\r\n\r\n  // 对外方法，设置对应 formItem 的值\r\n  function setFieldsValue(fields = {}) {\r\n    const nameLists = objectToArray(fields);\r\n\r\n    nameLists.forEach((nameList) => {\r\n      const fieldValue = get(fields, nameList);\r\n\r\n      let formItemRef;\r\n      if (nameList.length > 1) {\r\n        // 如果是数组，由于内存地址不一致，不能直接使用 Map.get 获取到 formItemRef\r\n        for (const [mapNameList, _formItemRef] of formMapRef.current.entries()) {\r\n          if (isEqual(nameList, mapNameList)) {\r\n            formItemRef = _formItemRef;\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        formItemRef = formMapRef.current.get(nameList[0]);\r\n      }\r\n\r\n      if (formItemRef?.current) {\r\n        formItemRef?.current?.setValue?.(fieldValue, fields);\r\n      } else {\r\n        set(floatingFormDataRef.current, nameList, fieldValue);\r\n      }\r\n    });\r\n  }\r\n\r\n  // 对外方法，设置对应 formItem 的数据\r\n  function setFields(fields = []) {\r\n    if (!Array.isArray(fields)) throw new Error('setFields 参数需要 Array 类型');\r\n\r\n    fields.forEach((field) => {\r\n      const { name, ...restFields } = field;\r\n      const formItemRef = getMapValue(name, formMapRef);\r\n\r\n      formItemRef?.current?.setField(restFields, field);\r\n    });\r\n  }\r\n\r\n  // 对外方法，重置对应 formItem 的数据\r\n  function reset(params: FormResetParams<FormData>) {\r\n    // reset all\r\n    if (typeof params === 'undefined') {\r\n      [...formMapRef.current.values()].forEach((formItemRef) => {\r\n        formItemRef?.current?.resetField();\r\n      });\r\n    } else {\r\n      const { type = 'initial', fields = [] } = params;\r\n\r\n      fields.forEach((name) => {\r\n        const formItemRef = getMapValue(name, formMapRef);\r\n        formItemRef?.current?.resetField(type);\r\n      });\r\n    }\r\n    onReset?.({});\r\n  }\r\n\r\n  // 对外方法，重置对应 formItem 的状态\r\n  function clearValidate(fields?: Array<keyof FormData>) {\r\n    // reset all\r\n    if (typeof fields === 'undefined') {\r\n      [...formMapRef.current.values()].forEach((formItemRef) => {\r\n        formItemRef?.current?.resetValidate();\r\n      });\r\n    } else {\r\n      if (!Array.isArray(fields)) throw new Error('clearValidate 参数需要 Array 类型');\r\n\r\n      fields.forEach((name) => {\r\n        const formItemRef = getMapValue(name, formMapRef);\r\n        formItemRef?.current?.resetValidate();\r\n      });\r\n    }\r\n  }\r\n\r\n  // 对外方法，设置 formItem 的错误信息\r\n  function setValidateMessage(message: FormValidateMessage<FormData>) {\r\n    travelMapFromObject(message, formMapRef, (formItemRef, fieldValue) => {\r\n      formItemRef?.current?.setValidateMessage?.(fieldValue);\r\n    });\r\n  }\r\n\r\n  // 对外方法，获取 formItem 的错误信息\r\n  function getValidateMessage(fields?: Array<keyof FormData>) {\r\n    const message = {};\r\n\r\n    if (typeof fields === 'undefined') {\r\n      [...formMapRef.current.values()].forEach((formItemRef) => {\r\n        const item = formItemRef?.current?.getValidateMessage?.();\r\n        if (isEmpty(item)) return;\r\n        message[formItemRef?.current?.name] = item;\r\n      });\r\n    } else {\r\n      if (!Array.isArray(fields)) throw new Error('getValidateMessage 参数需要 Array 类型');\r\n\r\n      fields.forEach((name) => {\r\n        const formItemRef = getMapValue(name, formMapRef);\r\n        const item = formItemRef?.current?.getValidateMessage?.();\r\n        if (isEmpty(item)) return;\r\n        message[formItemRef?.current?.name] = item;\r\n      });\r\n    }\r\n\r\n    if (isEmpty(message)) return;\r\n\r\n    return message;\r\n  }\r\n\r\n  return {\r\n    submit,\r\n    reset,\r\n    validate,\r\n    validateOnly,\r\n    clearValidate,\r\n    setFields,\r\n    setFieldsValue,\r\n    setValidateMessage,\r\n    getValidateMessage,\r\n    getFieldValue,\r\n    getFieldsValue,\r\n    currentElement: formRef.current,\r\n    getCurrentElement: () => formRef.current,\r\n  };\r\n}\r\n"],"names":["needValidate","name","fields","Array","isArray","some","item","String","formatValidateResult","validateResultList","result","reduce","r","err","Object","assign","keys","forEach","key","filter","fr","includes","keyList","split","fieldValue","calcFieldValue","merge","isEmpty","useInstance","props","formRef","formMapRef","floatingFormDataRef","_useConfig","useConfig","classPrefix","scrollToFirstError","_props$preventSubmitD","preventSubmitDefault","onSubmit","onReset","getFirstError","_r$firstKey$","_Object$keys","_Object$keys2","_slicedToArray","firstKey","scrollTo","concat","message","selector","_formRef$current$quer","_formRef$current","dom","current","querySelector","call","behavior","scrollIntoView","submit","e","_e$preventDefault","_e$stopPropagation","preventDefault","stopPropagation","validate","then","firstError","getFieldsValue","validateResult","_x","_validate","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","param","_ref","_ref$trigger","trigger","showErrorMessage","list","validateList","wrap","_context","prev","next","_toConsumableArray","values","formItemRef","_formItemRef$current16","_formItemRef$current17","isFunction","map","Promise","all","sent","abrupt","stop","validateOnly","_x2","_validateOnly","_callee2","_ref2","_ref2$trigger","_context2","_formItemRef$current18","_formItemRef$current19","_formItemRef$current$5","_formItemRef$current20","getFieldValue","_formItemRef$current","_formItemRef$current$","getMapValue","getValue","nameList","fieldsValue","_iterator","_createForOfIteratorHelper","entries","reverse","_step","s","n","done","_step$value","value","isFormList","_formItemRef$current$2","_formItemRef$current2","_formItemRef$current$3","_formItemRef$current3","supportNumberKey","f","console","error","_formItemRef$current$4","_formItemRef$current4","setFieldsValue","length","undefined","nameLists","objectToArray","_formItemRef2","get","_iterator2","_step2","_step2$value","mapNameList","_formItemRef","isEqual","_formItemRef3","_formItemRef3$setValu","setValue","set","setFields","Error","field","_formItemRef$current5","restFields","_objectWithoutProperties","_excluded","setField","reset","params","_formItemRef$current6","resetField","_params$type","type","_params$fields","_formItemRef$current7","clearValidate","_formItemRef$current8","resetValidate","_formItemRef$current9","setValidateMessage","travelMapFromObject","_formItemRef$current0","_formItemRef$current1","getValidateMessage","_formItemRef$current10","_formItemRef$current11","_formItemRef$current12","_formItemRef$current13","_formItemRef$current14","_formItemRef$current15","currentElement","getCurrentElement"],"mappings":"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"}
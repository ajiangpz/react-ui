{"version":3,"file":"index.js","sources":["../../../../components/form/utils/index.ts"],"sourcesContent":["import { has, get, isObject, isArray, isEmpty } from 'lodash-es';\r\nimport type { NamePath } from '../type';\r\n\r\n// 获取 formMap 管理的数据\r\nexport function getMapValue(\r\n  name: NamePath,\r\n  formMapRef: React.RefObject<Map<any, any>>,\r\n) {\r\n  if (!formMapRef.current) return;\r\n\r\n  // 提取所有 map key\r\n  const mapKeys = [...formMapRef.current.keys()];\r\n  // 转译为字符串后比对 key 兼容数组格式\r\n  const key = mapKeys.find((key) => String(key) === String(name));\r\n  // 拿到 key 引用地址获取 value\r\n  return formMapRef.current.get(key);\r\n}\r\n\r\n// { user: { name: '' } } => [['user', 'name']]\r\n// 不处理数组类型\r\n// { user: [{ name: '' }]} => [['user']]\r\nexport function objectToArray(obj: Record<string | number, any>) {\r\n  const result: (string | number)[][] = [];\r\n\r\n  function traverse(current: any, path: string[] = []) {\r\n    if (isObject(current) && !isArray(current) && !isEmpty(current)) {\r\n      Object.keys(current).forEach((key) => {\r\n        traverse(current[key], [...path, key]);\r\n      });\r\n    } else {\r\n      result.push(path);\r\n    }\r\n  }\r\n\r\n  traverse(obj);\r\n  return result;\r\n}\r\n\r\n// 将数据整理成对象，数组 name 转化嵌套对象: ['user', 'name'] => { user: { name: '' } }\r\nexport function calcFieldValue(name: NamePath, value: any, isFormList = true) {\r\n  if (Array.isArray(name)) {\r\n    if (isFormList) {\r\n      const fieldValue = name.reduceRight((prev, curr) => {\r\n        const arr = [];\r\n        if (/^\\d+$/.test(String(curr))) arr[curr] = prev;\r\n        return arr.length ? arr : { [curr]: prev };\r\n      }, value);\r\n      return { ...fieldValue };\r\n    }\r\n    return name.reduceRight((prev, curr, currentIndex) => {\r\n      if (currentIndex === name.length - 1) {\r\n        return { [curr]: value };\r\n      }\r\n      return { [curr]: prev };\r\n    }, {});\r\n  }\r\n\r\n  return { [name]: value };\r\n}\r\n\r\n// 通过对象数据类型获取 map 引用: { user: { name: '' } } => formMap.get(['user', 'name'])\r\nexport function travelMapFromObject(\r\n  obj: Record<any, any>,\r\n  formMapRef: React.RefObject<Map<any, any>>,\r\n  callback: Function,\r\n) {\r\n  for (const [mapName, formItemRef] of formMapRef.current.entries()) {\r\n    if (has(obj, mapName)) {\r\n      callback(formItemRef, get(obj, mapName));\r\n    }\r\n  }\r\n}\r\n"],"names":["getMapValue","name","formMapRef","current","mapKeys","_toConsumableArray","keys","key","find","String","get","objectToArray","obj","result","traverse","path","arguments","length","undefined","isObject","isArray","isEmpty","Object","forEach","concat","push","calcFieldValue","value","isFormList","Array","fieldValue","reduceRight","prev","curr","arr","test","_defineProperty","_objectSpread","currentIndex","travelMapFromObject","callback","_iterator","_createForOfIteratorHelper","entries","_step","s","n","done","_step$value","_slicedToArray","mapName","formItemRef","has","err","e","f"],"mappings":"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"}